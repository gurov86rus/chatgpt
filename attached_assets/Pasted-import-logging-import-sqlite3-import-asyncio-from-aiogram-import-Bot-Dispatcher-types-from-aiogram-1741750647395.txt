import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import TOKEN

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MaintenanceState(StatesGroup):
    date = State()
    mileage = State()
    works = State()

class RepairState(StatesGroup):
    date = State()
    mileage = State()
    description = State()
    cost = State()

class EditState(StatesGroup):
    field = State()
    value = State()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ
def get_vehicle_buttons():
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, model, reg_number FROM vehicles")
    vehicles = cursor.fetchall()
    conn.close()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{v[1]} ({v[2]})", callback_data=f"vehicle_{v[0]}")] for v in vehicles
    ])
    return keyboard

# –ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ
def get_vehicle_card(vehicle_id):
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM vehicles WHERE id = ?", (vehicle_id,))
    vehicle = cursor.fetchone()

    cursor.execute("SELECT date, mileage, works FROM maintenance WHERE vehicle_id = ?", (vehicle_id,))
    to_history = cursor.fetchall()

    cursor.execute("SELECT date, mileage, description, cost FROM repairs WHERE vehicle_id = ?", (vehicle_id,))
    repairs = cursor.fetchall()

    card = (
        f"üöõ **{vehicle[1]} ({vehicle[4]})**\n"
        f"üìú **VIN:** `{vehicle[2] or '-'}`\n"
        f"üìè **–ü—Ä–æ–±–µ–≥:** `{vehicle[12] or 0} –∫–º`\n"  # –ü–æ–ª–µ mileage (–∏–Ω–¥–µ–∫—Å 12 –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
        f"üìÖ **–û–°–ê–ì–û –¥–æ:** `{vehicle[7] or '-'}`\n"
        f"üîß **–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–æ:** `{vehicle[9] or '-'}`\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {'‚úî –¢—Ä–µ–±—É–µ—Ç—Å—è' if vehicle[6] else '‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
        f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    )
    for record in to_history:
        card += f"üìÖ `{record[0]}` ‚Äì `{record[1]} –∫–º` ‚Äì {record[2]}\n"
    card += "\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    for record in repairs:
        card += f"üîß `{record[0]}` ‚Äì `{record[1]} –∫–º` ‚Äì {record[2]} ‚Äì üí∞ `{record[3]} —Ä—É–±.`\n" if record[3] else f"üîß `{record[0]}` ‚Äì `{record[1]} –∫–º` ‚Äì {record[2]}\n"
    if not to_history and not repairs:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–û", callback_data=f"add_to_{vehicle_id}")],
        [InlineKeyboardButton(text="üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"add_repair_{vehicle_id}")],
        [InlineKeyboardButton(text="üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{vehicle_id}")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    conn.close()
    return card, keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=get_vehicle_buttons())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ
@dp.callback_query(lambda c: c.data.startswith("vehicle_"))
async def show_vehicle(callback: types.CallbackQuery):
    vehicle_id = int(callback.data.split("_")[1])
    card, keyboard = get_vehicle_card(vehicle_id)
    await callback.message.edit_text(card, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=get_vehicle_buttons())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¢–û
@dp.callback_query(lambda c: c.data.startswith("add_to_"))
async def add_to_start(callback: types.CallbackQuery, state: FSMContext):
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¢–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-10):")
    await state.set_state(MaintenanceState.date)
    await callback.answer()

@dp.message(MaintenanceState.date)
async def process_to_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ (–≤ –∫–º):")
    await state.set_state(MaintenanceState.mileage)

@dp.message(MaintenanceState.mileage)
async def process_to_mileage(message: types.Message, state: FSMContext):
    await state.update_data(mileage=int(message.text))
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(MaintenanceState.works)

@dp.message(MaintenanceState.works)
async def process_to_works(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO maintenance (vehicle_id, date, mileage, works) VALUES (?, ?, ?, ?)",
                   (data["vehicle_id"], data["date"], data["mileage"], message.text))
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    cursor.execute("UPDATE vehicles SET mileage = ? WHERE id = ?", (data["mileage"], data["vehicle_id"]))
    conn.commit()
    conn.close()
    await state.clear()
    card, keyboard = get_vehicle_card(data["vehicle_id"])
    await message.answer("–¢–û –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"vehicle_{data['vehicle_id']}")]]))
    await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
@dp.callback_query(lambda c: c.data.startswith("add_repair_"))
async def add_repair_start(callback: types.CallbackQuery, state: FSMContext):
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-10):")
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.message(RepairState.date)
async def process_repair_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ (–≤ –∫–º):")
    await state.set_state(RepairState.mileage)

@dp.message(RepairState.mileage)
async def process_repair_mileage(message: types.Message, state: FSMContext):
    await state.update_data(mileage=int(message.text))
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–µ–º–æ–Ω—Ç:")
    await state.set_state(RepairState.description)

@dp.message(RepairState.description)
async def process_repair_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(RepairState.cost)

@dp.message(RepairState.cost)
async def process_repair_cost(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO repairs (vehicle_id, date, mileage, description, cost) VALUES (?, ?, ?, ?, ?)",
                   (data["vehicle_id"], data["date"], data["mileage"], data["description"], int(message.text)))
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    cursor.execute("UPDATE vehicles SET mileage = ? WHERE id = ?", (data["mileage"], data["vehicle_id"]))
    conn.commit()
    conn.close()
    await state.clear()
    card, keyboard = get_vehicle_card(data["vehicle_id"])
    await message.answer("–†–µ–º–æ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"vehicle_{data['vehicle_id']}")]]))
    await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_vehicle_start(callback: types.CallbackQuery, state: FSMContext):
    vehicle_id = int(callback.data.split("_")[1])
    await state.update_data(vehicle_id=vehicle_id)
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f, callback_data=f"edit_field_{vehicle_id}_{i}")] for i, f in enumerate(fields)
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
async def select_field(callback: types.CallbackQuery, state: FSMContext):
    vehicle_id, field_index = map(int, callback.data.split("_")[2:])
    await state.update_data(field_index=field_index)
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {fields[field_index]} (—Ñ–æ—Ä–º–∞—Ç: –¥–ª—è –¥–∞—Ç—ã - –ì–ì–ì–ì-–ú–ú-–î–î, –¥–ª—è —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–∞ - 0/1):")
    await state.set_state(EditState.value)
    await callback.answer()

@dp.message(EditState.value)
async def process_edit_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    field_index = data["field_index"]
    value = message.text
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    if fields[field_index] in ["tachograph_required", "mileage"]:
        value = int(value)
    cursor.execute(f"UPDATE vehicles SET {fields[field_index]} = ? WHERE id = ?", (value, vehicle_id))
    conn.commit()
    conn.close()
    await state.clear()
    card, keyboard = get_vehicle_card(vehicle_id)
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"vehicle_{vehicle_id}")]]))
    await message.delete()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())