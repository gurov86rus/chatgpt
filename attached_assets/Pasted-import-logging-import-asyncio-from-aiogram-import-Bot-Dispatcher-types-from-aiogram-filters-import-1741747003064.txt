import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üìå –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
vehicle_data = {
    "model": "–ö–∞–º–ê–ó-43118-15",
    "number": "–•445–û–ï96",
    "vin": "X7926047C0008204",
    "mileage": 125000,  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥
    "next_to": 130000,  # –°–ª–µ–¥—É—é—â–µ–µ –¢–û
    "last_to": "10.02.2025",  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û
    "next_to_date": "10.06.2025",  # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û
    "osago_valid": "23.02.2026",  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –û–°–ê–ì–û
    "tachograph_required": True,  # –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∏–ª–∏ –Ω–µ—Ç
    "to_history": [
        {"date": "10.02.2025", "mileage": 120000, "works": "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, —Ñ–∏–ª—å—Ç—Ä–æ–≤"},
        {"date": "10.10.2024", "mileage": 110000, "works": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–æ–≤–æ–π"},
    ],
    "repairs": []
}

# üìå –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ
def get_vehicle_card():
    remaining_km = max(0, vehicle_data["next_to"] - vehicle_data["mileage"])
    tachograph_status = "‚úî –¢—Ä–µ–±—É–µ—Ç—Å—è" if vehicle_data["tachograph_required"] else "‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"

    card = (
        f"üöõ **{vehicle_data['model']} ({vehicle_data['number']})**\n"
        f"üìú **VIN:** {vehicle_data['vin']}\n"
        f"üìè **–ü—Ä–æ–±–µ–≥:** {vehicle_data['mileage']} –∫–º\n"
        f"üîß **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** {vehicle_data['last_to']} ({vehicle_data['next_to'] - 10000} –∫–º)\n"
        f"üîú **–°–ª–µ–¥—É—é—â–µ–µ –¢–û:** {vehicle_data['next_to_date']} (—á–µ—Ä–µ–∑ {remaining_km} –∫–º)\n"
        f"üìÖ **–û–°–ê–ì–û –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:** {vehicle_data['osago_valid']}\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {tachograph_status}\n"
        f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    )

    for record in vehicle_data["to_history"]:
        card += f"üìÖ {record['date']} ‚Äì {record['mileage']} –∫–º ‚Äì {record['works']}\n"

    card += "\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    if vehicle_data["repairs"]:
        for repair in vehicle_data["repairs"]:
            card += f"üîß {repair['date']} ‚Äì {repair['mileage']} –∫–º ‚Äì {repair['repair']} ‚Äì üí∞ {repair['cost']} —Ä—É–±.\n"
    else:
        card += "üîπ –ù–µ—Ç –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤.\n"

    return card

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥", callback_data="update_mileage")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –¢–û", callback_data="show_history")],
        [InlineKeyboardButton(text="üõ† –í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç", callback_data="add_repair")],
    ])
    return keyboard

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(get_vehicle_card(), parse_mode="Markdown", reply_markup=get_main_keyboard())

# üìå –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞
class RepairFSM(StatesGroup):
    date = State()
    mileage = State()
    issues = State()
    cost = State()

# üìå –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞
@dp.callback_query(lambda c: c.data == "add_repair")
async def add_repair_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    msg = await callback_query.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–ª–æ–º–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.03.2025):")
    await state.update_data(last_message=msg.message_id)
    await state.set_state(RepairFSM.date)

# üìå –í–≤–æ–¥ –¥–∞—Ç—ã –ø–æ–ª–æ–º–∫–∏
@dp.message(RepairFSM.date)
async def add_repair_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    msg = await message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–ª–æ–º–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 126000):")
    await state.set_state(RepairFSM.mileage)

# üìå –í–≤–æ–¥ –ø—Ä–æ–±–µ–≥–∞
@dp.message(RepairFSM.mileage)
async def add_repair_mileage(message: types.Message, state: FSMContext):
    try:
        mileage = int(message.text)
        await state.update_data(mileage=mileage)
        msg = await message.answer("üîß –ß—Ç–æ –º–µ–Ω—è–ª–æ—Å—å? –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(RepairFSM.issues)
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ —á–∏—Å–ª–æ–º.")

# üìå –í–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–º–æ–Ω—Ç–∞
@dp.message(RepairFSM.issues)
async def add_repair_issues(message: types.Message, state: FSMContext):
    await state.update_data(issues=message.text.strip())
    msg = await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç (—Ä—É–±.):")
    await state.set_state(RepairFSM.cost)

# üìå –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
@dp.message(RepairFSM.cost)
async def add_repair_cost(message: types.Message, state: FSMContext):
    try:
        cost = int(message.text)
        repair_data = await state.get_data()
        repair_data["cost"] = cost
        vehicle_data["repairs"].append(repair_data)
        msg = await message.answer("‚úÖ –†–µ–º–æ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω!", reply_markup=get_main_keyboard())
        await asyncio.sleep(3)
        await msg.delete()
        await message.answer(get_vehicle_card(), parse_mode="Markdown", reply_markup=get_main_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())