import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
vehicle_data = {
    "model": "–ö–∞–º–ê–ó-43118-15",
    "number": "–•445–û–ï96",
    "vin": "X7926047C0008204",
    "mileage": 125000,
    "next_to": 130000,
    "last_to": "10.02.2025",
    "next_to_date": "10.06.2025",
    "osago_valid": "23.02.2026",
    "tachograph_required": True,
    "to_history": [
        {"date": "10.02.2025", "mileage": 120000, "works": "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, —Ñ–∏–ª—å—Ç—Ä–æ–≤"},
        {"date": "10.10.2024", "mileage": 110000, "works": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–æ–≤–æ–π"},
    ],
    "repairs": []
}

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ
def get_vehicle_card():
    remaining_km = max(0, vehicle_data["next_to"] - vehicle_data["mileage"])
    tachograph_status = "‚úî **–¢—Ä–µ–±—É–µ—Ç—Å—è**" if vehicle_data["tachograph_required"] else "‚ùå **–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è**"

    card = (
        f"üöõ **{vehicle_data['model']} ({vehicle_data['number']})**\n"
        f"üìú **VIN:** `{vehicle_data['vin']}`\n"
        f"üìè **–ü—Ä–æ–±–µ–≥:** `{vehicle_data['mileage']} –∫–º`\n"
        f"üîß **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** `{vehicle_data['last_to']}` (`{vehicle_data['next_to'] - 10000} –∫–º`)\n"
        f"üîú **–°–ª–µ–¥—É—é—â–µ–µ –¢–û:** `{vehicle_data['next_to_date']}` (**—á–µ—Ä–µ–∑ {remaining_km} –∫–º**)\n"
        f"üìÖ **–û–°–ê–ì–û –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:** `{vehicle_data['osago_valid']}`\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {tachograph_status}\n"
        f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    )

    for record in vehicle_data["to_history"]:
        card += f"üìÖ `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['works']}\n"

    card += "\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    if vehicle_data["repairs"]:
        for repair in vehicle_data["repairs"]:
            card += f"üîß `{repair['date']}` ‚Äì `{repair['mileage']} –∫–º` ‚Äì {repair['repair']} ‚Äì üí∞ `{repair['cost']} —Ä—É–±.`\n"
    else:
        card += "üîπ –ù–µ—Ç –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤.\n"

    return card

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥", callback_data="update_mileage")],
        [InlineKeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="show_card")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–û", callback_data="add_to")],
        [InlineKeyboardButton(text="üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data="add_repair")],
    ])
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ToState(StatesGroup):
    date = State()
    mileage = State()
    works = State()

class RepairState(StatesGroup):
    date = State()
    mileage = State()
    repair = State()
    cost = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"
@dp.callback_query(lambda c: c.data == "show_card")
async def show_vehicle_card(callback: types.CallbackQuery):
    card = get_vehicle_card()
    await callback.message.edit_text(card, reply_markup=get_main_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¢–û"
@dp.callback_query(lambda c: c.data == "add_to")
async def add_to_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¢–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.06.2025):")
    await state.set_state(ToState.date)
    await callback.answer()

@dp.message(ToState.date)
async def process_to_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –¢–û (–≤ –∫–º):")
    await state.set_state(ToState.mileage)

@dp.message(ToState.mileage)
async def process_to_mileage(message: types.Message, state: FSMContext):
    await state.update_data(mileage=int(message.text))
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—ã, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞ –¢–û:")
    await state.set_state(ToState.works)

@dp.message(ToState.works)
async def process_to_works(message: types.Message, state: FSMContext):
    data = await state.get_data()
    vehicle_data["to_history"].append({
        "date": data["date"],
        "mileage": data["mileage"],
        "works": message.text
    })
    await state.clear()
    await message.answer("–¢–û –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç"
@dp.callback_query(lambda c: c.data == "add_repair")
async def add_repair_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.06.2025):")
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.message(RepairState.date)
async def process_repair_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–º–æ–Ω—Ç–∞ (–≤ –∫–º):")
    await state.set_state(RepairState.mileage)

@dp.message(RepairState.mileage)
async def process_repair_mileage(message: types.Message, state: FSMContext):
    await state.update_data(mileage=int(message.text))
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ä–µ–º–æ–Ω—Ç:")
    await state.set_state(RepairState.repair)

@dp.message(RepairState.repair)
async def process_repair_description(message: types.Message, state: FSMContext):
    await state.update_data(repair=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(RepairState.cost)

@dp.message(RepairState.cost)
async def process_repair_cost(message: types.Message, state: FSMContext):
    data = await state.get_data()
    vehicle_data["repairs"].append({
        "date": data["date"],
        "mileage": data["mileage"],
        "repair": data["repair"],
        "cost": int(message.text)
    })
    await state.clear()
    await message.answer("–†–µ–º–æ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())