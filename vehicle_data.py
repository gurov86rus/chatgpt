# This file contains the vehicle data structure and functions to manipulate it

# Sample vehicle data
vehicle_data = {
    "model": "–ö–∞–º–ê–ó-43118-15",
    "number": "–•445–û–ï96",
    "vin": "X7926047C0008204",
    "mileage": 125000,  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥
    "next_to": 130000,  # –°–ª–µ–¥—É—é—â–µ–µ –¢–û
    "last_to": "10.02.2025",  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û
    "next_to_date": "10.06.2025",  # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û
    "osago_valid": "23.02.2026",  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –û–°–ê–ì–û
    "tachograph_required": True,  # –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∏–ª–∏ –Ω–µ—Ç
    "to_history": [
        {"date": "10.02.2025", "mileage": 120000, "works": "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, —Ñ–∏–ª—å—Ç—Ä–æ–≤"},
        {"date": "10.10.2024", "mileage": 110000, "works": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–æ–≤–æ–π"},
    ],
    "repairs": []
}

# Function to update vehicle mileage
def update_mileage(new_mileage):
    """
    Update the vehicle's mileage
    
    Args:
        new_mileage (int): New mileage value
        
    Returns:
        bool: True if updated successfully, False otherwise
    """
    if new_mileage < vehicle_data["mileage"]:
        return False
    
    vehicle_data["mileage"] = new_mileage
    return True

# Function to add a repair record
def add_repair(date, mileage, repair_details, cost):
    """
    Add a new repair record
    
    Args:
        date (str): Date of repair
        mileage (int): Mileage at repair time
        repair_details (str): Repair details
        cost (int): Repair cost
        
    Returns:
        bool: True if added successfully
    """
    repair_record = {
        "date": date,
        "mileage": mileage,
        "repair": repair_details,
        "cost": cost
    }
    
    vehicle_data["repairs"].append(repair_record)
    return True

# Function to get formatted vehicle card
def get_vehicle_card():
    """
    Get formatted vehicle information card
    
    Returns:
        str: Formatted vehicle information
    """
    remaining_km = max(0, vehicle_data["next_to"] - vehicle_data["mileage"])
    tachograph_status = "‚úî –¢—Ä–µ–±—É–µ—Ç—Å—è" if vehicle_data["tachograph_required"] else "‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"

    card = (
        f"üöõ **{vehicle_data['model']} ({vehicle_data['number']})**\n"
        f"üìú **VIN:** {vehicle_data['vin']}\n"
        f"üìè **–ü—Ä–æ–±–µ–≥:** {vehicle_data['mileage']} –∫–º\n"
        f"üîß **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** {vehicle_data['last_to']} ({vehicle_data['next_to'] - 10000} –∫–º)\n"
        f"üîú **–°–ª–µ–¥—É—é—â–µ–µ –¢–û:** {vehicle_data['next_to_date']} (—á–µ—Ä–µ–∑ {remaining_km} –∫–º)\n"
        f"üìÖ **–û–°–ê–ì–û –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:** {vehicle_data['osago_valid']}\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {tachograph_status}\n"
        f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    )

    for record in vehicle_data["to_history"]:
        card += f"üìÖ {record['date']} ‚Äì {record['mileage']} –∫–º ‚Äì {record['works']}\n"

    card += "\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    if vehicle_data["repairs"]:
        for repair in vehicle_data["repairs"]:
            card += f"üîß {repair['date']} ‚Äì {repair['mileage']} –∫–º ‚Äì {repair['repair']} ‚Äì üí∞ {repair['cost']} —Ä—É–±.\n"
    else:
        card += "üîπ –ù–µ—Ç –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤.\n"

    return card

# Function to get maintenance history
def get_maintenance_history():
    """
    Get formatted maintenance history
    
    Returns:
        str: Formatted maintenance history
    """
    history = "üìã **–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è**\n\n"
    
    if not vehicle_data["to_history"]:
        return history + "üîπ –ò—Å—Ç–æ—Ä–∏—è –¢–û –ø—É—Å—Ç–∞."
    
    for i, record in enumerate(vehicle_data["to_history"], 1):
        history += f"{i}. üìÖ **{record['date']}** ‚Äì {record['mileage']} –∫–º\n"
        history += f"   üîß –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: {record['works']}\n\n"
    
    return history
