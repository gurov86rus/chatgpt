#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import time
import logging
import requests
import sys
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("stable_bot.log")
    ]
)

logger = logging.getLogger(__name__)

def signal_handler(sig, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã {}".format(sig))
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

class SimpleBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.offset = 0
        self.running = True
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def api_request(self, method, params=None, json_data=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Telegram"""
        url = f"{self.api_url}/{method}"
        try:
            if json_data:
                response = requests.post(url, json=json_data, params=params)
            else:
                response = requests.get(url, params=params)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API {response.status_code}: {response.text}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return None
    
    def delete_webhook(self):
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫"""
        logger.info("–£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫...")
        result = self.api_request("deleteWebhook", json_data={"drop_pending_updates": True})
        if result and result.get("ok"):
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return True
        return False
    
    def get_me(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        logger.info("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...")
        result = self.api_request("getMe")
        if result and result.get("ok"):
            bot_info = result.get("result", {})
            logger.info(f"–ë–æ—Ç @{bot_info.get('username')} (ID: {bot_info.get('id')}) —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return bot_info
        return None
    
    def get_updates(self, timeout=30):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        logger.debug(f"–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (offset={self.offset}, timeout={timeout})...")
        params = {
            "offset": self.offset,
            "timeout": timeout
        }
        result = self.api_request("getUpdates", params=params)
        if result and result.get("ok"):
            updates = result.get("result", [])
            if updates:
                # –û–±–Ω–æ–≤–ª—è–µ–º offset –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ + 1
                self.offset = updates[-1]["update_id"] + 1
                logger.debug(f"–ù–æ–≤—ã–π offset: {self.offset}")
            return updates
        return []
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {text[:30]}...")
        json_data = {
            "chat_id": chat_id,
            "text": text
        }
        result = self.api_request("sendMessage", json_data=json_data)
        if result and result.get("ok"):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
            return False
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not message.get("text"):
            logger.info("–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return
        
        chat_id = message["chat"]["id"]
        text = message["text"]
        user = message.get("from", {})
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
        
        if text == "/start":
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            name = user.get("first_name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            response = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–æ–º.\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n- –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞\n- –†–µ–º–æ–Ω—Ç—ã\n- –ü—Ä–æ–±–µ–≥–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n–î–ª—è –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help"
            self.send_message(chat_id, response)
        elif text == "/help":
            # –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏
            help_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            self.send_message(chat_id, help_text)
        elif text == "/info":
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            info_text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n- –í–µ—Ä—Å–∏—è: –°—Ç–∞–±–∏–ª—å–Ω–∞—è 1.0\n- –ò–º—è: @check_vin_avtobot\n- –í–∞—à ID: {}\n- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {}".format(
                user.get("id"), 
                time.strftime("%d.%m.%Y %H:%M:%S")
            )
            self.send_message(chat_id, info_text)
        elif text == "/ping":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.send_message(chat_id, "pong! ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è")
        else:
            # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.send_message(chat_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ"""
        if not self.delete_webhook():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
            return False
        
        bot_info = self.get_me()
        if not bot_info:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
            return False
        
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        updates = self.get_updates(timeout=1)
        if updates:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            for update in updates:
                if "message" in update:
                    self.handle_message(update["message"])
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while self.running:
            try:
                updates = self.get_updates(timeout=30)
                
                for update in updates:
                    if "message" in update:
                        self.handle_message(update["message"])
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                if not updates:
                    time.sleep(1)
            
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞")
                self.running = False
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    logger.info(f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {token[:5]}...")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = SimpleBot(token)
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return True

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")