import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN
from db_init import init_database

# Configure logging
logging.basicConfig(level=logging.INFO)

# Ensure database is initialized
init_database()

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States for form input
class MaintenanceState(StatesGroup):
    date = State()
    mileage = State()
    works = State()

class RepairState(StatesGroup):
    date = State()
    mileage = State()
    description = State()
    cost = State()

class MileageUpdateState(StatesGroup):
    mileage = State()
    
class EditState(StatesGroup):
    field = State()
    value = State()

# Helper functions
def get_vehicle_buttons():
    """Create keyboard with vehicle selection buttons"""
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, model, reg_number FROM vehicles ORDER BY model")
    vehicles = cursor.fetchall()
    conn.close()

    keyboard = []
    for vehicle in vehicles:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üöõ {vehicle['model']} ({vehicle['reg_number']})", 
                callback_data=f"vehicle_{vehicle['id']}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_vehicle_card(vehicle_id):
    """Generate detailed vehicle information card with all available data"""
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # Get vehicle data with all fields from enhanced schema
    cursor.execute("""
        SELECT * FROM vehicles WHERE id = ?
    """, (vehicle_id,))
    vehicle = cursor.fetchone()
    
    if not vehicle:
        conn.close()
        return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
    
    # Get maintenance history
    cursor.execute("""
        SELECT date, mileage, works FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    to_history = cursor.fetchall()
    
    # Get repair history
    cursor.execute("""
        SELECT date, mileage, description, cost FROM repairs 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    repairs = cursor.fetchall()
    
    # Generate vehicle card with enhanced information
    card = (
        f"üöõ **{vehicle['model']} ({vehicle['reg_number']})**\n\n"
        f"üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"üìú **VIN:** `{vehicle['vin'] or '-'}`\n"
        f"üîñ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{vehicle['category'] or '-'}`\n"
        f"üè∑ **–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:** `{vehicle['qualification'] or '-'}`\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** `{vehicle['mileage'] or 0} –∫–º`\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {'‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è' if vehicle['tachograph_required'] else '‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n"
        
        f"üìù **–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞—Ç—ã:**\n"
        f"üìÖ **–û–°–ê–ì–û –¥–æ:** `{vehicle['osago_valid'] or '-'}`\n"
        f"üîß **–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–æ:** `{vehicle['tech_inspection_valid'] or '-'}`\n"
    )
    
    # Add SKZI information if tachograph is required
    if vehicle['tachograph_required']:
        card += (
            f"üîê **–°–ö–ó–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:** `{vehicle['skzi_install_date'] or '-'}`\n"
            f"üîê **–°–ö–ó–ò –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** `{vehicle['skzi_valid_date'] or '-'}`\n"
        )
    
    # Add maintenance and fuel information if available
    if vehicle['next_to'] or vehicle['last_to_date'] or vehicle['next_to_date']:
        card += f"\nüîß **–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:**\n"
        if vehicle['last_to_date']:
            card += f"üìÜ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** `{vehicle['last_to_date']}`\n"
        if vehicle['next_to_date']:
            card += f"üìÜ **–°–ª–µ–¥—É—é—â–µ–µ –¢–û:** `{vehicle['next_to_date']}`\n"
        if vehicle['next_to']:
            remaining = vehicle['next_to'] - vehicle['mileage']
            card += f"üîÑ **–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –¢–û:** `{remaining} –∫–º`\n"
            if remaining <= 0:
                card += "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –¢–û –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!**\n"
            elif remaining <= 1000:
                card += "‚ö†Ô∏è **–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤–æ–µ –¢–û!**\n"
    
    # Add fuel information if available
    if vehicle['fuel_type'] or vehicle['fuel_tank_capacity'] or vehicle['avg_fuel_consumption']:
        card += f"\n‚õΩ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–ª–∏–≤–µ:**\n"
        if vehicle['fuel_type']:
            card += f"üõ¢ **–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:** `{vehicle['fuel_type']}`\n"
        if vehicle['fuel_tank_capacity']:
            card += f"üõ¢ **–û–±—ä–µ–º –±–∞–∫–∞:** `{vehicle['fuel_tank_capacity']} –ª`\n"
        if vehicle['avg_fuel_consumption']:
            card += f"üõ¢ **–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:** `{vehicle['avg_fuel_consumption']} –ª/100–∫–º`\n"
    
    # Add notes if available
    if vehicle['notes']:
        card += f"\nüìù **–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:** {vehicle['notes']}\n"
    
    # Add maintenance history
    card += f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    if to_history:
        for record in to_history:
            card += f"üìÖ `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['works']}\n"
    else:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏\n"
    
    # Add repair history
    card += f"\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    if repairs:
        for record in repairs:
            cost_text = f" ‚Äì üí∞ `{record['cost']} —Ä—É–±.`" if record['cost'] else ""
            card += f"üîß `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['description']}{cost_text}\n"
    else:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö\n"
    
    # Create action keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥", callback_data=f"update_mileage_{vehicle_id}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–û", callback_data=f"add_to_{vehicle_id}")],
        [InlineKeyboardButton(text="üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"add_repair_{vehicle_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{vehicle_id}")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back")]
    ])
    
    conn.close()
    return card, keyboard

# Command handlers
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """Handler for /start command"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞!\n\n"
        "üöó –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö\n"
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        "- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –æ –¢–û –∏ —Ä–µ–º–æ–Ω—Ç–∞—Ö\n"
        "- –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_vehicle_buttons()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """Handler for /help command"""
    await message.answer(
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "üöó **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚öôÔ∏è **–†–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º:**\n"
        "- –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–±–µ–≥–∞\n"
        "- –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–æ–≤–æ–º –¢–û\n"
        "- –ó–∞–ø–∏—Å—å –æ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–º —Ä–µ–º–æ–Ω—Ç–µ\n\n"
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¢–û"
    )

# Callback query handlers
@dp.callback_query(lambda c: c.data.startswith("vehicle_"))
async def show_vehicle(callback: types.CallbackQuery):
    """Handler for vehicle selection"""
    vehicle_id = int(callback.data.split("_")[1])
    card, keyboard = get_vehicle_card(vehicle_id)
    
    await callback.message.edit_text(
        card,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back")
async def back_to_menu(callback: types.CallbackQuery):
    """Handler for back button"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_vehicle_buttons()
    )
    await callback.answer()

# Update mileage handlers
@dp.callback_query(lambda c: c.data.startswith("update_mileage_"))
async def update_mileage_start(callback: types.CallbackQuery, state: FSMContext):
    """Start mileage update process"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    # Get current mileage
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("SELECT mileage FROM vehicles WHERE id = ?", (vehicle_id,))
    current_mileage = cursor.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üìä **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: `{current_mileage} –∫–º`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ):",
        parse_mode="Markdown"
    )
    await state.set_state(MileageUpdateState.mileage)
    await callback.answer()

@dp.message(MileageUpdateState.mileage)
async def process_mileage_update(message: types.Message, state: FSMContext):
    """Process mileage update input"""
    try:
        new_mileage = int(message.text)
        data = await state.get_data()
        vehicle_id = data["vehicle_id"]
        
        # Get current mileage
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute("SELECT mileage FROM vehicles WHERE id = ?", (vehicle_id,))
        current_mileage = cursor.fetchone()[0]
        
        # Validate new mileage
        if new_mileage <= current_mileage:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ ({new_mileage} –∫–º) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ({current_mileage} –∫–º).\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"vehicle_{vehicle_id}")]
                ])
            )
            return
        
        # Update mileage
        cursor.execute("UPDATE vehicles SET mileage = ? WHERE id = ?", (new_mileage, vehicle_id))
        conn.commit()
        conn.close()
        
        await state.clear()
        card, keyboard = get_vehicle_card(vehicle_id)
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–±–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_mileage} –∫–º", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
        
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Maintenance record handlers
@dp.callback_query(lambda c: c.data.startswith("add_to_"))
async def add_to_start(callback: types.CallbackQuery, state: FSMContext):
    """Start maintenance record addition"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    await callback.message.edit_text(
        "üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¢–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
        parse_mode="Markdown"
    )
    await state.set_state(MaintenanceState.date)
    await callback.answer()

@dp.message(MaintenanceState.date)
async def process_to_date(message: types.Message, state: FSMContext):
    """Process maintenance date input"""
    await state.update_data(date=message.text)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –¢–û (–≤ –∫–º):"
    )
    await state.set_state(MaintenanceState.mileage)

@dp.message(MaintenanceState.mileage)
async def process_to_mileage(message: types.Message, state: FSMContext):
    """Process maintenance mileage input"""
    try:
        mileage = int(message.text)
        await state.update_data(mileage=mileage)
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
        )
        await state.set_state(MaintenanceState.works)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(MaintenanceState.works)
async def process_to_works(message: types.Message, state: FSMContext):
    """Process maintenance works description and save record"""
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    
    # Also update vehicle's last_to_date
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    
    # Add maintenance record
    cursor.execute(
        "INSERT INTO maintenance (vehicle_id, date, mileage, works) VALUES (?, ?, ?, ?)",
        (vehicle_id, data["date"], data["mileage"], message.text)
    )
    
    # Update vehicle's last_to_date
    cursor.execute(
        "UPDATE vehicles SET last_to_date = ? WHERE id = ?",
        (data["date"], vehicle_id)
    )
    
    conn.commit()
    conn.close()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
        ])
    )

# Repair record handlers
@dp.callback_query(lambda c: c.data.startswith("add_repair_"))
async def add_repair_start(callback: types.CallbackQuery, state: FSMContext):
    """Start repair record addition"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    await callback.message.edit_text(
        "üõ† **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
        parse_mode="Markdown"
    )
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.message(RepairState.date)
async def process_repair_date(message: types.Message, state: FSMContext):
    """Process repair date input"""
    await state.update_data(date=message.text)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–º–æ–Ω—Ç–∞ (–≤ –∫–º):"
    )
    await state.set_state(RepairState.mileage)

@dp.message(RepairState.mileage)
async def process_repair_mileage(message: types.Message, state: FSMContext):
    """Process repair mileage input"""
    try:
        mileage = int(message.text)
        await state.update_data(mileage=mileage)
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
        )
        await state.set_state(RepairState.description)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(RepairState.description)
async def process_repair_description(message: types.Message, state: FSMContext):
    """Process repair description input"""
    await state.update_data(description=message.text)
    await message.answer(
        "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ):"
    )
    await state.set_state(RepairState.cost)

@dp.message(RepairState.cost)
async def process_repair_cost(message: types.Message, state: FSMContext):
    """Process repair cost input and save record"""
    try:
        cost = int(message.text)
        data = await state.get_data()
        vehicle_id = data["vehicle_id"]
        
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO repairs (vehicle_id, date, mileage, description, cost) VALUES (?, ?, ?, ?, ?)",
            (vehicle_id, data["date"], data["mileage"], data["description"], cost if cost > 0 else None)
        )
        conn.commit()
        conn.close()
        
        await state.clear()
        await message.answer(
            "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Main function to run the bot
async def main():
    # Initialize database
    init_database()
    
    # Start polling
    logging.info("Starting vehicle maintenance bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())