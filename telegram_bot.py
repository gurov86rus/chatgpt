import logging
import sqlite3
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TOKEN
from db_init import init_database

# Configure logging
logging.basicConfig(level=logging.INFO)

# Ensure database is initialized
init_database()

# Admin list - add your Telegram ID here
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# Add additional command to help with admin setup
@dp.message(Command("myid"))
async def show_my_id(message: types.Message):
    """Handler to show user's Telegram ID"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    await message.answer(
        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
        f"üÜî –í–∞—à Telegram ID: `{user_id}`\n"
        f"üë§ –ò–º—è: {user_name}\n"
        f"üîë –°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin(user_id) else '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
        f"‚ÑπÔ∏è –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ —Å–ø–∏—Å–æ–∫ ADMIN_IDS –≤ —Ñ–∞–π–ª–µ telegram_bot.py",
        parse_mode="Markdown"
    )

# Function to check if user is admin
def is_admin(user_id):
    """Check if user is admin"""
    return user_id in ADMIN_IDS

# Decorator for admin-only functions
def admin_required(func):
    """Decorator to restrict function to admins only"""
    async def wrapper(event, *args, **kwargs):
        user_id = event.from_user.id
        if not is_admin(user_id):
            if isinstance(event, types.CallbackQuery):
                await event.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
                return
            elif isinstance(event, types.Message):
                await event.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
                return
        return await func(event, *args, **kwargs)
    return wrapper

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# States for form input
class MaintenanceState(StatesGroup):
    date = State()
    mileage = State()
    works = State()

class RepairState(StatesGroup):
    date = State()
    mileage = State()
    description = State()
    cost = State()

class MileageUpdateState(StatesGroup):
    mileage = State()
    
class EditState(StatesGroup):
    field = State()
    value = State()

class MaintenanceEditState(StatesGroup):
    maintenance_id = State()
    date = State()
    mileage = State()
    works = State()
    
class MaintenanceDeleteState(StatesGroup):
    maintenance_id = State()

# Helper functions
def get_vehicle_buttons():
    """Create keyboard with vehicle selection buttons"""
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, model, reg_number FROM vehicles ORDER BY model")
    vehicles = cursor.fetchall()
    conn.close()

    keyboard = []
    for vehicle in vehicles:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üöõ {vehicle['model']} ({vehicle['reg_number']})", 
                callback_data=f"vehicle_{vehicle['id']}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_vehicle_card(vehicle_id, user_id=None):
    """
    Generate detailed vehicle information card with all available data
    
    Args:
        vehicle_id (int): Vehicle ID
        user_id (int, optional): User ID, to check admin rights
    """
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # Get vehicle data with all fields from enhanced schema
    cursor.execute("""
        SELECT * FROM vehicles WHERE id = ?
    """, (vehicle_id,))
    vehicle = cursor.fetchone()
    
    if not vehicle:
        conn.close()
        return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
    
    # Get maintenance history
    cursor.execute("""
        SELECT date, mileage, works FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    to_history = cursor.fetchall()
    
    # Get repair history
    cursor.execute("""
        SELECT date, mileage, description, cost FROM repairs 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    repairs = cursor.fetchall()
    
    # Generate vehicle card with enhanced information
    card = (
        f"üöõ **{vehicle['model']} ({vehicle['reg_number']})**\n\n"
        f"üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"üìú **VIN:** `{vehicle['vin'] or '-'}`\n"
        f"üîñ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{vehicle['category'] or '-'}`\n"
        f"üè∑ **–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:** `{vehicle['qualification'] or '-'}`\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** `{vehicle['mileage'] or 0} –∫–º`\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {'‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è' if vehicle['tachograph_required'] else '‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n"
        
        f"üìù **–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞—Ç—ã:**\n"
        f"üìÖ **–û–°–ê–ì–û –¥–æ:** `{vehicle['osago_valid'] or '-'}`\n"
        f"üîß **–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–æ:** `{vehicle['tech_inspection_valid'] or '-'}`\n"
    )
    
    # Add SKZI information if tachograph is required
    if vehicle['tachograph_required']:
        card += (
            f"üîê **–°–ö–ó–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:** `{vehicle['skzi_install_date'] or '-'}`\n"
            f"üîê **–°–ö–ó–ò –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** `{vehicle['skzi_valid_date'] or '-'}`\n"
        )
    
    # Add maintenance and fuel information if available
    if vehicle['next_to'] or vehicle['last_to_date'] or vehicle['next_to_date']:
        card += f"\nüîß **–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:**\n"
        if vehicle['last_to_date']:
            card += f"üìÜ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** `{vehicle['last_to_date']}`\n"
        if vehicle['next_to_date']:
            card += f"üìÜ **–°–ª–µ–¥—É—é—â–µ–µ –¢–û:** `{vehicle['next_to_date']}`\n"
        if vehicle['next_to']:
            remaining = vehicle['next_to'] - vehicle['mileage']
            card += f"üîÑ **–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –¢–û:** `{remaining} –∫–º`\n"
            if remaining <= 0:
                card += "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –¢–û –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!**\n"
            elif remaining <= 1000:
                card += "‚ö†Ô∏è **–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤–æ–µ –¢–û!**\n"
    
    # Add fuel information if available
    if vehicle['fuel_type'] or vehicle['fuel_tank_capacity'] or vehicle['avg_fuel_consumption']:
        card += f"\n‚õΩ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–ª–∏–≤–µ:**\n"
        if vehicle['fuel_type']:
            card += f"üõ¢ **–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:** `{vehicle['fuel_type']}`\n"
        if vehicle['fuel_tank_capacity']:
            card += f"üõ¢ **–û–±—ä–µ–º –±–∞–∫–∞:** `{vehicle['fuel_tank_capacity']} –ª`\n"
        if vehicle['avg_fuel_consumption']:
            card += f"üõ¢ **–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:** `{vehicle['avg_fuel_consumption']} –ª/100–∫–º`\n"
    
    # Add notes if available
    if vehicle['notes']:
        card += f"\nüìù **–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:** {vehicle['notes']}\n"
    
    # Add maintenance history
    card += f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    if to_history:
        for record in to_history:
            card += f"üìÖ `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['works']}\n"
    else:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏\n"
    
    # Add repair history
    card += f"\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    if repairs:
        for record in repairs:
            cost_text = f" ‚Äì üí∞ `{record['cost']} —Ä—É–±.`" if record['cost'] else ""
            card += f"üîß `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['description']}{cost_text}\n"
    else:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö\n"
    
    # Create action keyboard based on user's admin status
    keyboard_buttons = []
    
    # Check if user is admin
    is_user_admin = is_admin(user_id) if user_id is not None else False
    
    # For regular users, only show back button
    if not is_user_admin:
        keyboard_buttons = [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back")]
        ]
    else:
        # For admins, show all control buttons
        keyboard_buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥", callback_data=f"update_mileage_{vehicle_id}")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–û", callback_data=f"add_to_{vehicle_id}")],
            [InlineKeyboardButton(text="üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"add_repair_{vehicle_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–°", callback_data=f"edit_{vehicle_id}")],
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û", callback_data=f"manage_to_{vehicle_id}")],
            [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞–º–∏", callback_data=f"manage_repairs_{vehicle_id}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back")]
        ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    conn.close()
    return card, keyboard

# Command handlers
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """Handler for /start command"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    # Show user ID
    user_id_info = f"üÜî –í–∞—à Telegram ID: {user_id}"
    if is_admin(user_id):
        user_id_info += " (–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
    else:
        user_id_info += " (–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}, –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞!\n\n"
        f"{user_id_info}\n\n"
        f"üöó –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö\n"
        f"- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        f"- –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –æ –¢–û –∏ —Ä–µ–º–æ–Ω—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        f"- –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_vehicle_buttons()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """Handler for /help command"""
    await message.answer(
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "üöó **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚öôÔ∏è **–†–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º:**\n"
        "- –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–±–µ–≥–∞\n"
        "- –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–æ–≤–æ–º –¢–û\n"
        "- –ó–∞–ø–∏—Å—å –æ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–º —Ä–µ–º–æ–Ω—Ç–µ\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–°\n\n"
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¢–û"
    )

# Callback query handlers
@dp.callback_query(lambda c: c.data.startswith("vehicle_"))
async def show_vehicle(callback: types.CallbackQuery):
    """Handler for vehicle selection"""
    vehicle_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    card, keyboard = get_vehicle_card(vehicle_id, user_id)
    
    await callback.message.edit_text(
        card,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back")
async def back_to_menu(callback: types.CallbackQuery):
    """Handler for back button"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_vehicle_buttons()
    )
    await callback.answer()

# Update mileage handlers
@dp.callback_query(lambda c: c.data.startswith("update_mileage_"))
@admin_required
async def update_mileage_start(callback: types.CallbackQuery, state: FSMContext):
    """Start mileage update process"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    # Get current mileage
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("SELECT mileage FROM vehicles WHERE id = ?", (vehicle_id,))
    current_mileage = cursor.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üìä **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: `{current_mileage} –∫–º`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ):",
        parse_mode="Markdown"
    )
    await state.set_state(MileageUpdateState.mileage)
    await callback.answer()

@dp.message(MileageUpdateState.mileage)
async def process_mileage_update(message: types.Message, state: FSMContext):
    """Process mileage update input"""
    try:
        new_mileage = int(message.text)
        data = await state.get_data()
        vehicle_id = data["vehicle_id"]
        
        # Get current mileage
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute("SELECT mileage FROM vehicles WHERE id = ?", (vehicle_id,))
        current_mileage = cursor.fetchone()[0]
        
        # Validate new mileage
        if new_mileage <= current_mileage:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ ({new_mileage} –∫–º) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ({current_mileage} –∫–º).\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"vehicle_{vehicle_id}")]
                ])
            )
            return
        
        # Update mileage
        cursor.execute("UPDATE vehicles SET mileage = ? WHERE id = ?", (new_mileage, vehicle_id))
        conn.commit()
        conn.close()
        
        await state.clear()
        card, keyboard = get_vehicle_card(vehicle_id)
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–±–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_mileage} –∫–º", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
        
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Maintenance record handlers
@dp.callback_query(lambda c: c.data.startswith("add_to_"))
@admin_required
async def add_to_start(callback: types.CallbackQuery, state: FSMContext):
    """Start maintenance record addition"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    await callback.message.edit_text(
        "üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¢–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
        parse_mode="Markdown"
    )
    await state.set_state(MaintenanceState.date)
    await callback.answer()

@dp.message(MaintenanceState.date)
async def process_to_date(message: types.Message, state: FSMContext):
    """Process maintenance date input"""
    await state.update_data(date=message.text)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –¢–û (–≤ –∫–º):"
    )
    await state.set_state(MaintenanceState.mileage)

@dp.message(MaintenanceState.mileage)
async def process_to_mileage(message: types.Message, state: FSMContext):
    """Process maintenance mileage input"""
    try:
        mileage = int(message.text)
        await state.update_data(mileage=mileage)
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
        )
        await state.set_state(MaintenanceState.works)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(MaintenanceState.works)
async def process_to_works(message: types.Message, state: FSMContext):
    """Process maintenance works description and save record"""
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    
    # Also update vehicle's last_to_date
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    
    # Add maintenance record
    cursor.execute(
        "INSERT INTO maintenance (vehicle_id, date, mileage, works) VALUES (?, ?, ?, ?)",
        (vehicle_id, data["date"], data["mileage"], message.text)
    )
    
    # Update vehicle's last_to_date
    cursor.execute(
        "UPDATE vehicles SET last_to_date = ? WHERE id = ?",
        (data["date"], vehicle_id)
    )
    
    conn.commit()
    conn.close()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
        ])
    )

# Repair record handlers
@dp.callback_query(lambda c: c.data.startswith("add_repair_"))
@admin_required
async def add_repair_start(callback: types.CallbackQuery, state: FSMContext):
    """Start repair record addition"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    await callback.message.edit_text(
        "üõ† **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
        parse_mode="Markdown"
    )
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.message(RepairState.date)
async def process_repair_date(message: types.Message, state: FSMContext):
    """Process repair date input for adding new repair"""
    data = await state.get_data()
    
    # Check if we're editing an existing repair
    if 'repair_id' in data:
        # Handle edit mode
        if message.text.strip() == "":
            await state.update_data(new_date=data['current_date'])
        else:
            await state.update_data(new_date=message.text)
        
        await message.answer(
            f"üî¢ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥:** {data['current_mileage']} –∫–º\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ –≤ –∫–º (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
            parse_mode="Markdown"
        )
    else:
        # Handle add mode
        await state.update_data(date=message.text)
        await message.answer(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–º–æ–Ω—Ç–∞ (–≤ –∫–º):"
        )
    
    await state.set_state(RepairState.mileage)

@dp.message(RepairState.mileage)
async def process_repair_mileage(message: types.Message, state: FSMContext):
    """Process repair mileage input"""
    data = await state.get_data()
    
    try:
        # Check if we're editing an existing repair
        if 'repair_id' in data:
            # Handle edit mode - use current mileage if input is empty
            if message.text.strip() == "":
                await state.update_data(new_mileage=data['current_mileage'])
            else:
                new_mileage = int(message.text)
                await state.update_data(new_mileage=new_mileage)
            
            await message.answer(
                f"üìù **–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:**\n{data['current_description']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
                parse_mode="Markdown"
            )
        else:
            # Handle add mode
            mileage = int(message.text)
            await state.update_data(mileage=mileage)
            await message.answer(
                "üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
            )
        
        await state.set_state(RepairState.description)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(RepairState.description)
async def process_repair_description(message: types.Message, state: FSMContext):
    """Process repair description input"""
    data = await state.get_data()
    
    # Check if we're editing an existing repair
    if 'repair_id' in data:
        # Handle edit mode - use current description if input is empty
        if message.text.strip() == "":
            await state.update_data(new_description=data['current_description'])
        else:
            await state.update_data(new_description=message.text)
        
        await message.answer(
            f"üí∞ **–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {data['current_cost']} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0):",
            parse_mode="Markdown"
        )
    else:
        # Handle add mode
        await state.update_data(description=message.text)
        await message.answer(
            "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ):"
        )
    
    await state.set_state(RepairState.cost)

@dp.message(RepairState.cost)
async def process_repair_cost(message: types.Message, state: FSMContext):
    """Process repair cost input and save record"""
    try:
        data = await state.get_data()
        
        # Check if we're editing an existing repair
        if 'repair_id' in data:
            # Handle edit mode
            if message.text.strip() == "":
                new_cost = data['current_cost']
            else:
                new_cost = int(message.text)
            
            # Update repair record
            conn = sqlite3.connect('vehicles.db')
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE repairs SET date = ?, mileage = ?, description = ?, cost = ? WHERE id = ?",
                (
                    data['new_date'], 
                    data['new_mileage'], 
                    data['new_description'], 
                    new_cost if new_cost > 0 else None,
                    data['repair_id']
                )
            )
            conn.commit()
            conn.close()
            
            await state.clear()
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîß –ö —Å–ø–∏—Å–∫—É —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data=f"manage_repairs_{data['vehicle_id']}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{data['vehicle_id']}")]
                ])
            )
        else:
            # Handle add mode
            cost = int(message.text)
            vehicle_id = data["vehicle_id"]
            
            conn = sqlite3.connect('vehicles.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO repairs (vehicle_id, date, mileage, description, cost) VALUES (?, ?, ?, ?, ?)",
                (vehicle_id, data["date"], data["mileage"], data["description"], cost if cost > 0 else None)
            )
            conn.commit()
            conn.close()
            
            await state.clear()
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
                ])
            )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Edit vehicle handlers
@dp.callback_query(lambda c: c.data.startswith("edit_") and not c.data.startswith("edit_field_") and not c.data.startswith("edit_repair_") and not c.data.startswith("edit_maintenance_"))
@admin_required
async def edit_vehicle_start(callback: types.CallbackQuery, state: FSMContext):
    """Start vehicle editing process"""
    vehicle_id = int(callback.data.split("_")[1])
    await state.update_data(vehicle_id=vehicle_id)
    
    # List of editable fields
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    
    # Create keyboard with field buttons and user-friendly names
    keyboard = []
    field_names = {
        "model": "üöó –ú–æ–¥–µ–ª—å –¢–°",
        "vin": "üî¢ VIN –Ω–æ–º–µ—Ä",
        "category": "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "reg_number": "üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä",
        "qualification": "üìÑ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "tachograph_required": "üìü –¢–∞—Ö–æ–≥—Ä–∞—Ñ (0/1)",
        "osago_valid": "üìù –°—Ä–æ–∫ –û–°–ê–ì–û",
        "tech_inspection_date": "üîç –î–∞—Ç–∞ —Ç–µ—Ö. –æ—Å–º–æ—Ç—Ä–∞",
        "tech_inspection_valid": "üìÜ –°—Ä–æ–∫ —Ç–µ—Ö. –æ—Å–º–æ—Ç—Ä–∞",
        "skzi_install_date": "üîê –î–∞—Ç–∞ —É—Å—Ç. –°–ö–ó–ò",
        "skzi_valid_date": "üìÜ –°—Ä–æ–∫ –°–ö–ó–ò",
        "notes": "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        "mileage": "üîÑ –ü—Ä–æ–±–µ–≥"
    }
    
    for i, field in enumerate(fields):
        keyboard.append([
            InlineKeyboardButton(
                text=field_names.get(field, field), 
                callback_data=f"edit_field_{vehicle_id}_{i}"
            )
        ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨Ö –û—Ç–º–µ–Ω–∞", 
            callback_data=f"vehicle_{vehicle_id}"
        )
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–°**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
async def select_edit_field(callback: types.CallbackQuery, state: FSMContext):
    """Handler for selecting field to edit"""
    parts = callback.data.split("_")
    vehicle_id = int(parts[2])
    field_index = int(parts[3])
    
    # Store field index in state
    await state.update_data(field_index=field_index)
    
    # List of editable fields
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    
    selected_field = fields[field_index]
    field_format = ""
    
    # User-friendly field names
    field_names = {
        "model": "–ú–æ–¥–µ–ª—å –¢–°",
        "vin": "VIN –Ω–æ–º–µ—Ä",
        "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "reg_number": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
        "qualification": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "tachograph_required": "–ù–∞–ª–∏—á–∏–µ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–∞",
        "osago_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –û–°–ê–ì–û",
        "tech_inspection_date": "–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞",
        "tech_inspection_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞",
        "skzi_install_date": "–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –°–ö–ó–ò",
        "skzi_valid_date": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –°–ö–ó–ò",
        "notes": "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        "mileage": "–ü—Ä–æ–±–µ–≥"
    }
    
    # Add format hints for specific fields
    if selected_field == "tachograph_required":
        field_format = " (–≤–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1)"
    elif "_date" in selected_field or "_valid" in selected_field:
        field_format = " (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)"
    elif selected_field == "mileage":
        field_format = " (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)"
    
    field_display_name = field_names.get(selected_field, selected_field)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è '{field_display_name}'**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ{field_format}:",
        parse_mode="Markdown"
    )
    
    await state.set_state(EditState.value)
    await callback.answer()

@dp.message(EditState.value)
async def process_edit_value(message: types.Message, state: FSMContext):
    """Process edit value input"""
    try:
        data = await state.get_data()
        vehicle_id = data["vehicle_id"]
        field_index = data["field_index"]
        value = message.text
        
        # List of editable fields
        fields = [
            "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
            "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
            "skzi_valid_date", "notes", "mileage"
        ]
        
        selected_field = fields[field_index]
        
        # User-friendly field names
        field_names = {
            "model": "–ú–æ–¥–µ–ª—å –¢–°",
            "vin": "VIN –Ω–æ–º–µ—Ä",
            "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            "reg_number": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
            "qualification": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "tachograph_required": "–ù–∞–ª–∏—á–∏–µ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–∞",
            "osago_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –û–°–ê–ì–û",
            "tech_inspection_date": "–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞",
            "tech_inspection_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞",
            "skzi_install_date": "–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –°–ö–ó–ò",
            "skzi_valid_date": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –°–ö–ó–ò",
            "notes": "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
            "mileage": "–ü—Ä–æ–±–µ–≥"
        }
        
        field_display_name = field_names.get(selected_field, selected_field)
        
        # Convert specific fields to proper types
        if selected_field in ["tachograph_required", "mileage"]:
            value = int(value)
        
        # Update database
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute(
            f"UPDATE vehicles SET {selected_field} = ? WHERE id = ?", 
            (value, vehicle_id)
        )
        conn.commit()
        conn.close()
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ü–æ–ª–µ '{field_display_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Maintenance Management Handlers
@dp.callback_query(lambda c: c.data.startswith("manage_to_"))
async def manage_maintenance(callback: types.CallbackQuery):
    """Handler for managing maintenance records"""
    vehicle_id = int(callback.data.split("_")[2])
    
    # Get maintenance records
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, date, mileage, works FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    maintenance_records = cursor.fetchall()
    conn.close()
    
    # Create keyboard with maintenance records
    keyboard = []
    if maintenance_records:
        for record in maintenance_records:
            # Limit works description to 30 chars
            works_short = record['works'][:30] + ('...' if len(record['works']) > 30 else '')
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ {record['date']} | {record['mileage']} –∫–º | {works_short}", 
                    callback_data=f"maintenance_{record['id']}"
                )
            ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text="üîπ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¢–û", 
                callback_data=f"no_action"
            )
        ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –¢–°", 
            callback_data=f"vehicle_{vehicle_id}"
        )
    ])
    
    await callback.message.edit_text(
        "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –æ –¢–û**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("maintenance_"))
async def show_maintenance_record(callback: types.CallbackQuery):
    """Handler for showing maintenance record details"""
    maintenance_id = int(callback.data.split("_")[1])
    
    # Get maintenance record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT m.id, m.date, m.mileage, m.works, m.vehicle_id, v.model, v.reg_number
        FROM maintenance m
        JOIN vehicles v ON m.vehicle_id = v.id
        WHERE m.id = ?
    """, (maintenance_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Check if user is admin
    user_id = callback.from_user.id
    admin = is_admin(user_id)
    
    # Create keyboard with actions based on user role
    if admin:
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_maintenance_{maintenance_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_maintenance_{maintenance_id}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_to_{record['vehicle_id']}")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_to_{record['vehicle_id']}")]
        ]
    
    await callback.message.edit_text(
        f"üìã **–ó–∞–ø–∏—Å—å –æ –¢–û #{maintenance_id}**\n\n"
        f"üöó **–¢–°:** {record['model']} ({record['reg_number']})\n"
        f"üìÖ **–î–∞—Ç–∞:** {record['date']}\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** {record['mileage']} –∫–º\n\n"
        f"üìù **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:**\n{record['works']}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_maintenance_"))
@admin_required
async def edit_maintenance_start(callback: types.CallbackQuery, state: FSMContext):
    """Handler for starting maintenance record edit"""
    maintenance_id = int(callback.data.split("_")[2])
    
    # Get maintenance record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, works, vehicle_id FROM maintenance WHERE id = ?", (maintenance_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save record data to state
    await state.update_data(
        maintenance_id=maintenance_id,
        vehicle_id=record['vehicle_id'],
        current_date=record['date'],
        current_mileage=record['mileage'],
        current_works=record['works']
    )
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¢–û #{maintenance_id}**\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {record['date']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é):",
        parse_mode="Markdown"
    )
    
    await state.set_state(MaintenanceEditState.date)
    await callback.answer()

@dp.message(MaintenanceEditState.date)
async def process_maintenance_edit_date(message: types.Message, state: FSMContext):
    """Process maintenance edit date input"""
    data = await state.get_data()
    
    # Use current date if input is empty
    if message.text.strip() == "":
        await state.update_data(new_date=data['current_date'])
    else:
        await state.update_data(new_date=message.text)
    
    await message.answer(
        f"üî¢ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥:** {data['current_mileage']} –∫–º\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ –≤ –∫–º (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
        parse_mode="Markdown"
    )
    await state.set_state(MaintenanceEditState.mileage)

@dp.message(MaintenanceEditState.mileage)
async def process_maintenance_edit_mileage(message: types.Message, state: FSMContext):
    """Process maintenance edit mileage input"""
    data = await state.get_data()
    
    try:
        # Use current mileage if input is empty
        if message.text.strip() == "":
            await state.update_data(new_mileage=data['current_mileage'])
        else:
            new_mileage = int(message.text)
            await state.update_data(new_mileage=new_mileage)
        
        await message.answer(
            f"üìù **–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:**\n{data['current_works']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
            parse_mode="Markdown"
        )
        await state.set_state(MaintenanceEditState.works)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(MaintenanceEditState.works)
async def process_maintenance_edit_works(message: types.Message, state: FSMContext):
    """Process maintenance edit works input and save changes"""
    data = await state.get_data()
    
    # Use current works if input is empty
    if message.text.strip() == "":
        new_works = data['current_works']
    else:
        new_works = message.text
    
    # Update maintenance record
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE maintenance SET date = ?, mileage = ?, works = ? WHERE id = ?",
        (data['new_date'], data['new_mileage'], new_works, data['maintenance_id'])
    )
    
    # If this is the most recent maintenance, update vehicle's last_to_date
    cursor.execute("""
        SELECT id FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC 
        LIMIT 1
    """, (data['vehicle_id'],))
    latest_maintenance = cursor.fetchone()
    
    if latest_maintenance and latest_maintenance[0] == data['maintenance_id']:
        cursor.execute(
            "UPDATE vehicles SET last_to_date = ? WHERE id = ?",
            (data['new_date'], data['vehicle_id'])
        )
    
    conn.commit()
    conn.close()
    
    await state.clear()
    
    await message.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –¢–û", callback_data=f"manage_to_{data['vehicle_id']}")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{data['vehicle_id']}")]
        ])
    )

@dp.callback_query(lambda c: c.data.startswith("delete_maintenance_"))
@admin_required
async def delete_maintenance_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Handler for confirming maintenance record deletion"""
    maintenance_id = int(callback.data.split("_")[2])
    
    # Get maintenance record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, works, vehicle_id FROM maintenance WHERE id = ?", (maintenance_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save maintenance_id and vehicle_id to state
    await state.update_data(
        maintenance_id=maintenance_id,
        vehicle_id=record['vehicle_id']
    )
    await state.set_state(MaintenanceDeleteState.maintenance_id)
    
    # Create confirmation keyboard
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_maintenance_{maintenance_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"maintenance_{maintenance_id}")]
    ]
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –¢–û –æ—Ç {record['date']} (–ø—Ä–æ–±–µ–≥: {record['mileage']} –∫–º)?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_maintenance_"))
@admin_required
async def delete_maintenance_execute(callback: types.CallbackQuery, state: FSMContext):
    """Handler for executing maintenance record deletion"""
    data = await state.get_data()
    vehicle_id = data['vehicle_id']
    maintenance_id = data['maintenance_id']
    
    # Delete maintenance record
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    
    # Check if this is the latest maintenance record
    cursor.execute("""
        SELECT id FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC 
        LIMIT 1
    """, (vehicle_id,))
    latest_maintenance = cursor.fetchone()
    
    # Delete the record
    cursor.execute("DELETE FROM maintenance WHERE id = ?", (maintenance_id,))
    
    # If this was the latest record, update the vehicle's last_to_date
    if latest_maintenance and latest_maintenance[0] == maintenance_id:
        # Get the new latest record
        cursor.execute("""
            SELECT date FROM maintenance 
            WHERE vehicle_id = ? 
            ORDER BY date DESC, mileage DESC 
            LIMIT 1
        """, (vehicle_id,))
        new_latest = cursor.fetchone()
        
        if new_latest:
            cursor.execute(
                "UPDATE vehicles SET last_to_date = ? WHERE id = ?",
                (new_latest[0], vehicle_id)
            )
        else:
            cursor.execute(
                "UPDATE vehicles SET last_to_date = NULL WHERE id = ?",
                (vehicle_id,)
            )
    
    conn.commit()
    conn.close()
    
    await state.clear()
    
    await callback.message.edit_text(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –¢–û", callback_data=f"manage_to_{vehicle_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
        ])
    )
    await callback.answer()

# Repair Management Handlers
@dp.callback_query(lambda c: c.data.startswith("manage_repairs_"))
async def manage_repairs(callback: types.CallbackQuery):
    """Handler for managing repair records"""
    vehicle_id = int(callback.data.split("_")[2])
    
    # Get repair records
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, date, mileage, description, cost FROM repairs 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    repair_records = cursor.fetchall()
    conn.close()
    
    # Create keyboard with repair records
    keyboard = []
    if repair_records:
        for record in repair_records:
            # Limit description to 30 chars
            desc_short = record['description'][:30] + ('...' if len(record['description']) > 30 else '')
            cost_text = f" | {record['cost']} ‚ÇΩ" if record['cost'] else ""
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üõ† {record['date']} | {record['mileage']} –∫–º{cost_text}", 
                    callback_data=f"repair_{record['id']}"
                )
            ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text="üîπ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö", 
                callback_data=f"no_action"
            )
        ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –¢–°", 
            callback_data=f"vehicle_{vehicle_id}"
        )
    ])
    
    await callback.message.edit_text(
        "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "no_action")
async def no_action(callback: types.CallbackQuery):
    """Handler for empty action"""
    await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

@dp.callback_query(lambda c: c.data.startswith("repair_"))
async def show_repair_record(callback: types.CallbackQuery):
    """Handler for showing repair record details"""
    repair_id = int(callback.data.split("_")[1])
    
    # Get repair record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT r.id, r.date, r.mileage, r.description, r.cost, r.vehicle_id, v.model, v.reg_number
        FROM repairs r
        JOIN vehicles v ON r.vehicle_id = v.id
        WHERE r.id = ?
    """, (repair_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Format cost display
    cost_display = f"{record['cost']} ‚ÇΩ" if record['cost'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # Check if user is admin
    user_id = callback.from_user.id
    admin = is_admin(user_id)
    
    # Create keyboard with actions based on user role
    if admin:
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_repair_{repair_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_repair_{repair_id}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_repairs_{record['vehicle_id']}")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_repairs_{record['vehicle_id']}")]
        ]
    
    await callback.message.edit_text(
        f"üõ† **–ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ #{repair_id}**\n\n"
        f"üöó **–¢–°:** {record['model']} ({record['reg_number']})\n"
        f"üìÖ **–î–∞—Ç–∞:** {record['date']}\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** {record['mileage']} –∫–º\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {cost_display}\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:**\n{record['description']}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_repair_"))
@admin_required
async def edit_repair_start(callback: types.CallbackQuery, state: FSMContext):
    """Handler for starting repair record edit"""
    repair_id = int(callback.data.split("_")[2])
    
    # Get repair record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, description, cost, vehicle_id FROM repairs WHERE id = ?", (repair_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save record data to state
    await state.update_data(
        repair_id=repair_id,
        vehicle_id=record['vehicle_id'],
        current_date=record['date'],
        current_mileage=record['mileage'],
        current_description=record['description'],
        current_cost=record['cost'] or 0
    )
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ #{repair_id}**\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {record['date']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é):",
        parse_mode="Markdown"
    )
    
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_repair_"))
@admin_required
async def delete_repair_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Handler for confirming repair record deletion"""
    repair_id = int(callback.data.split("_")[2])
    
    # Get repair record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, description, vehicle_id FROM repairs WHERE id = ?", (repair_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save repair_id and vehicle_id to state
    await state.update_data(
        repair_id=repair_id,
        vehicle_id=record['vehicle_id']
    )
    
    # Create confirmation keyboard
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_repair_{repair_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"repair_{repair_id}")]
    ]
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ –æ—Ç {record['date']} (–ø—Ä–æ–±–µ–≥: {record['mileage']} –∫–º)?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_repair_"))
@admin_required
async def delete_repair_execute(callback: types.CallbackQuery, state: FSMContext):
    """Handler for executing repair record deletion"""
    data = await state.get_data()
    vehicle_id = data['vehicle_id']
    repair_id = data['repair_id']
    
    # Delete repair record
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM repairs WHERE id = ?", (repair_id,))
    conn.commit()
    conn.close()
    
    await state.clear()
    
    await callback.message.edit_text(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ö —Å–ø–∏—Å–∫—É —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data=f"manage_repairs_{vehicle_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
        ])
    )
    await callback.answer()

# Main function to run the bot
async def main():
    # Initialize database
    init_database()
    
    # Start polling
    logging.info("Starting vehicle maintenance bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())