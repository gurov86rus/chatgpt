import logging
import sqlite3
import asyncio
import os
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramAPIError
from config import TOKEN
from db_init import init_database
from db_operations import register_user, get_all_users, get_user_stats, is_user_admin, set_admin_status
import utils
from utils import days_until, format_days_remaining, get_to_interval_based_on_mileage, edit_fuel_info

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ DEBUG –¥–ª—è –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler("bot_debug.log")  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    ]
)

# Ensure database is initialized
init_database()

# Admin list - add your Telegram ID here
ADMIN_IDS = [936544929]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω

# Function to check if user is admin
def is_admin(user_id):
    """Check if user is admin"""
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã
    if user_id in ADMIN_IDS:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
    return is_user_admin(user_id)

# Decorator for admin-only functions
def admin_required(func):
    """Decorator to restrict function to admins only"""
    import inspect
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    sig = inspect.signature(func)
    param_names = list(sig.parameters.keys())
    
    async def wrapper(event, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id = event.from_user.id
        if not is_admin(user_id):
            if isinstance(event, types.CallbackQuery):
                await event.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
                return
            elif isinstance(event, types.Message):
                await event.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
                return
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å
        # –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Å–µ–≥–¥–∞ event, –µ–≥–æ –æ—Å—Ç–∞–≤–ª—è–µ–º
        filtered_kwargs = {}
        for key, value in kwargs.items():
            if key in param_names:
                filtered_kwargs[key] = value
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
        return await func(event, *args, **filtered_kwargs)
    
    return wrapper

# Initialize bot and dispatcher with enhanced error handling
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DefaultBotProperties –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ aiogram 3.7.0+
    from aiogram.client.default import DefaultBotProperties
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    if not TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ —Å–∞–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
    token_parts = TOKEN.split(':')
    if len(token_parts) >= 2:
        bot_id = token_parts[0]
        token_length = len(TOKEN)
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å ID: {bot_id}, –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {token_length} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        logging.warning("–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ '123456789:ABC...XYZ'")
    
    # Create Bot instance with updated initialization for aiogram 3.7.0+
    bot = Bot(
        token=TOKEN, 
        default=DefaultBotProperties(parse_mode="Markdown")
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram...")
    
    # Initialize storage and dispatcher
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    logging.info("Dispatcher successfully initialized")
except Exception as e:
    logging.error(f"Error initializing bot or dispatcher: {e}")
    import traceback
    logging.error(traceback.format_exc())
    raise

# States for form input
class MaintenanceState(StatesGroup):
    date = State()
    mileage = State()
    works = State()

class RepairState(StatesGroup):
    date = State()
    mileage = State()
    description = State()
    cost = State()

class MileageUpdateState(StatesGroup):
    mileage = State()
    
class EditState(StatesGroup):
    field = State()
    value = State()

class MaintenanceEditState(StatesGroup):
    maintenance_id = State()
    date = State()
    mileage = State()
    works = State()
    
class MaintenanceDeleteState(StatesGroup):
    maintenance_id = State()
    
class FuelInfoState(StatesGroup):
    vehicle_id = State()
    fuel_type = State()
    fuel_tank_capacity = State()
    avg_fuel_consumption = State()
    
class AdminManageState(StatesGroup):
    user_id = State()
    action = State() # "add" –∏–ª–∏ "remove"

# Helper functions
def get_vehicle_buttons():
    """Create keyboard with vehicle selection buttons"""
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, model, reg_number FROM vehicles ORDER BY model")
    vehicles = cursor.fetchall()
    conn.close()

    keyboard = []
    for vehicle in vehicles:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üöõ {vehicle['model']} ({vehicle['reg_number']})", 
                callback_data=f"vehicle_{vehicle['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    web_url = "https://d933dc0e-c8d9-4501-bbd7-4bdac973738c-00-33heojbox43gm.picard.replit.dev"
    keyboard.append([
        InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
            url=web_url
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_vehicle_card(vehicle_id, user_id=None):
    """
    Generate detailed vehicle information card with all available data
    
    Args:
        vehicle_id (int): Vehicle ID
        user_id (int, optional): User ID, to check admin rights
    """
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # Get vehicle data with all fields from enhanced schema
    cursor.execute("""
        SELECT * FROM vehicles WHERE id = ?
    """, (vehicle_id,))
    vehicle = cursor.fetchone()
    
    if not vehicle:
        conn.close()
        return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
    
    # Get maintenance history
    cursor.execute("""
        SELECT date, mileage, works FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    to_history = cursor.fetchall()
    
    # Get repair history
    cursor.execute("""
        SELECT date, mileage, description, cost FROM repairs 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    repairs = cursor.fetchall()
    
    # Get last maintenance record for interval calculation
    cursor.execute("""
        SELECT mileage FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC LIMIT 1
    """, (vehicle_id,))
    last_to_record = cursor.fetchone()
    last_to_mileage = last_to_record['mileage'] if last_to_record else None
    
    # Generate vehicle card with enhanced information
    card = (
        f"üöõ **{vehicle['model']} ({vehicle['reg_number']})**\n\n"
        f"üìã **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"üìú **VIN:** `{vehicle['vin'] or '-'}`\n"
        f"üîñ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{vehicle['category'] or '-'}`\n"
        f"üè∑ **–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:** `{vehicle['qualification'] or '-'}`\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** `{vehicle['mileage'] or 0} –∫–º`\n"
        f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {'‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è' if vehicle['tachograph_required'] else '‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n"
        
        f"üìù **–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å—Ä–æ–∫–∏:**\n"
    )
    
    # Add document expiration with days remaining
    osago_days = days_until(vehicle['osago_valid'])
    tech_days = days_until(vehicle['tech_inspection_valid'])
    
    card += f"üìÖ **–û–°–ê–ì–û –¥–æ:** `{vehicle['osago_valid'] or '-'}` {format_days_remaining(osago_days)}\n"
    card += f"üîß **–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–æ:** `{vehicle['tech_inspection_valid'] or '-'}` {format_days_remaining(tech_days)}\n"
    
    # Add SKZI information if tachograph is required
    if vehicle['tachograph_required']:
        skzi_days = days_until(vehicle['skzi_valid_date'])
        card += (
            f"üîê **–°–ö–ó–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:** `{vehicle['skzi_install_date'] or '-'}`\n"
            f"üîê **–°–ö–ó–ò –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** `{vehicle['skzi_valid_date'] or '-'}` {format_days_remaining(skzi_days)}\n"
        )
    
    # Add maintenance information with TO interval calculation
    if last_to_mileage:
        # Calculate next TO based on 10,000 km interval
        remaining_km, next_to_mileage = get_to_interval_based_on_mileage(last_to_mileage, vehicle['mileage'])
        
        card += f"\nüîß **–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:**\n"
        
        if vehicle['last_to_date']:
            card += f"üìÜ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** `{vehicle['last_to_date']}` –ø—Ä–∏ –ø—Ä–æ–±–µ–≥–µ `{last_to_mileage} –∫–º`\n"
        
        # Display next TO based on mileage
        card += f"üîÑ **–°–ª–µ–¥—É—é—â–µ–µ –¢–û –ø—Ä–∏:** `{next_to_mileage} –∫–º`\n"
        card += f"üîÑ **–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –¢–û:** `{remaining_km} –∫–º`\n"
        
        if remaining_km <= 0:
            card += "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –¢–û!**\n"
        elif remaining_km <= 500:
            card += "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –¢–û —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!**\n"
        elif remaining_km <= 1000:
            card += "‚ö†Ô∏è **–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤–æ–µ –¢–û!**\n"
    
    # Add fuel information if available
    if vehicle['fuel_type'] or vehicle['fuel_tank_capacity'] or vehicle['avg_fuel_consumption']:
        card += f"\n‚õΩ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–ª–∏–≤–µ:**\n"
        if vehicle['fuel_type']:
            card += f"üõ¢ **–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:** `{vehicle['fuel_type']}`\n"
        if vehicle['fuel_tank_capacity']:
            card += f"üõ¢ **–û–±—ä–µ–º –±–∞–∫–∞:** `{vehicle['fuel_tank_capacity']} –ª`\n"
        if vehicle['avg_fuel_consumption']:
            card += f"üõ¢ **–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:** `{vehicle['avg_fuel_consumption']} –ª/100–∫–º`\n"
    
    # Add notes if available
    if vehicle['notes']:
        card += f"\nüìù **–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:** {vehicle['notes']}\n"
    
    # Add maintenance history
    card += f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"
    if to_history:
        for record in to_history:
            card += f"üìÖ `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['works']}\n"
    else:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏\n"
    
    # Add repair history
    card += f"\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"
    if repairs:
        for record in repairs:
            cost_text = f" ‚Äì üí∞ `{record['cost']} —Ä—É–±.`" if record['cost'] else ""
            card += f"üîß `{record['date']}` ‚Äì `{record['mileage']} –∫–º` ‚Äì {record['description']}{cost_text}\n"
    else:
        card += "üîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö\n"
    
    # Create action keyboard based on user's admin status
    keyboard_buttons = []
    
    # Check if user is admin
    is_user_admin = is_admin(user_id) if user_id is not None else False
    
    # For regular users, only show back button
    if not is_user_admin:
        keyboard_buttons = [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back")]
        ]
    else:
        # For admins, show all control buttons
        keyboard_buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥", callback_data=f"update_mileage_{vehicle_id}")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–û", callback_data=f"add_to_{vehicle_id}")],
            [InlineKeyboardButton(text="üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"add_repair_{vehicle_id}")],
            [InlineKeyboardButton(text="‚õΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–ª–∏–≤–µ", callback_data=f"edit_fuel_{vehicle_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–°", callback_data=f"edit_{vehicle_id}")],
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û", callback_data=f"manage_to_{vehicle_id}")],
            [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞–º–∏", callback_data=f"manage_repairs_{vehicle_id}")],
            [InlineKeyboardButton(text="üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="generate_report")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back")]
        ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    conn.close()
    return card, keyboard

# Command handlers
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """Handler for /start command"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    register_user(user_id, message.from_user.username or "", user_name)
    
    # Show user ID
    user_id_info = f"üÜî –í–∞—à Telegram ID: {user_id}"
    if is_admin(user_id):
        user_id_info += " (–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
    else:
        user_id_info += " (–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await message.answer(
        f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ê–≤—Ç–æ–ø–∞—Ä–∫–æ–º!*\n\n"
        f"üöö *–ê–≤—Ç–æ–ë–æ—Ç - –í–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏*\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π —É—á–µ—Ç –∞–≤—Ç–æ–ø–∞—Ä–∫–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —Ä–µ–º–æ–Ω—Ç—ã –∏ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞.\n\n"
        f"üåê *–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å* –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n\n"
        f"{user_id_info}\n\n"
        f"üìä *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤—ã–º–∏ –¢–û –∏ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–º–∏ —Ä–µ–º–æ–Ω—Ç–∞–º–∏\n"
        f"‚Ä¢ –£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏ –∑–∞—Ç—Ä–∞—Ç\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–û–°–ê–ì–û, –¢–û, –°–ö–ó–ò)\n"
        f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å—Ä–æ–∫–∞—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
        f"üîç *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n"
        f"/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        f"/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        f"/myid - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ Telegram ID",
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    await message.answer(
        f"üöó *–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:*",
        reply_markup=get_vehicle_buttons(),
        parse_mode="Markdown"
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """Handler for /help command"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    web_url = "https://d933dc0e-c8d9-4501-bbd7-4bdac973738c-00-33heojbox43gm.picard.replit.dev"
    
    # –ë–∞–∑–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞
    help_text = (
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "üöó **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/myid - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin(message.from_user.id):
        help_text += (
            "/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "/users - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/admin - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        )
    
    # –û–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞
    help_text += (
        "\n‚öôÔ∏è **–†–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º:**\n"
        "- –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–±–µ–≥–∞\n"
        "- –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–æ–≤–æ–º –¢–û\n"
        "- –ó–∞–ø–∏—Å—å –æ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–º —Ä–µ–º–æ–Ω—Ç–µ\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–°\n\n"
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¢–û\n\n"
        "üíæ **–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
        "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00\n\n"
        "üåê **–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**\n"
        "–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("myid"))
async def show_my_id(message: types.Message):
    """Handler to show user's Telegram ID"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID
    register_user(user_id, message.from_user.username or "", user_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    admin_status = is_admin(user_id)
    help_text = ""
    if not admin_status and user_id in ADMIN_IDS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ ADMIN_IDS, –Ω–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω –≤ –ë–î –∫–∞–∫ –∞–¥–º–∏–Ω, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        set_admin_status(user_id, True)
        admin_status = True
        help_text = "‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
    
    await message.answer(
        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
        f"üÜî –í–∞—à Telegram ID: `{user_id}`\n"
        f"üë§ –ò–º—è: {user_name}\n"
        f"üîë –°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if admin_status else '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
        f"{help_text}\n"
        f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
        parse_mode="Markdown"
    )

@dp.message(Command("admin"))
@admin_required
async def admin_command(message: types.Message, state: FSMContext):
    """Handler for admin command to manage admin status"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add")],
        [InlineKeyboardButton(text="üîÑ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_remove")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
    ])
    
    await message.answer(
        "üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(lambda c: c.data == "admin_add")
@admin_required
async def admin_add(callback: types.CallbackQuery, state: FSMContext):
    """Start process of adding an admin"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await state.clear()
    # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await state.update_data(action="add")
    logging.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_data()}")
    
    await callback.message.edit_text(
        "üëë **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "_(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ)_",
        parse_mode="Markdown"
    )
    await state.set_state(AdminManageState.user_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_remove")
@admin_required
async def admin_remove(callback: types.CallbackQuery, state: FSMContext):
    """Start process of removing an admin"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await state.clear()
    # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await state.update_data(action="remove")
    logging.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_data()}")
    
    await callback.message.edit_text(
        "üîÑ **–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        parse_mode="Markdown"
    )
    await state.set_state(AdminManageState.user_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_cancel")
@admin_required
async def admin_cancel(callback: types.CallbackQuery):
    """Cancel admin management process"""
    await callback.message.edit_text(
        "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(AdminManageState.user_id)
@admin_required
async def process_admin_user_id(message: types.Message, state: FSMContext):
    """Process user ID input for admin management"""
    try:
        user_id = int(message.text)
        data = await state.get_data()
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {data}")
        
        action = data.get("action")
        if not action:
            logging.error(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, full_name, is_admin FROM users WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if not user:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /myid."
            )
            await state.clear()
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_name = user[1]
        is_admin = bool(user[2])
        logging.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}, –∞–¥–º–∏–Ω: {is_admin}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª
        if action == "add" and is_admin:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_name} (ID: {user_id})")
            await message.answer(
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await state.clear()
            return
        
        if action == "remove" and not is_admin:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}), –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await message.answer(
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await state.clear()
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(target_user_id=user_id, target_user_name=user_name)
        updated_data = await state.get_data()
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {updated_data}")
        
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
        ])
        
        action_text = "–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if action == "add" else "—É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        
        await message.answer(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ**\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å {action_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ –ò–º—è: {user_name}\n"
            f"üÜî ID: {user_id}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=confirm_keyboard,
            parse_mode="Markdown"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
        await state.set_state(AdminManageState.action)
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdminManageState.action")
        
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.callback_query(lambda c: c.data.startswith("confirm_"))
@admin_required
async def confirm_admin_action(callback: types.CallbackQuery, state: FSMContext):
    """Confirm admin status change"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback data
    callback_parts = callback.data.split("_")
    if len(callback_parts) > 1:
        callback_action = callback_parts[1]  # add –∏–ª–∏ remove
        logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback: {callback_action}")
    else:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data}")
        callback_action = "unknown"
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    data = await state.get_data()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if "target_user_id" not in data or "target_user_name" not in data or "action" not in data:
        logging.info(f"–î–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ callback: {callback.data}")
        
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if len(callback_parts) > 3 and callback_parts[0] == "confirm":
                user_id_str = callback_parts[3]
                user_id = int(user_id_str)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('vehicles.db')
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: column user_id -> id –≤ —Ç–∞–±–ª–∏—Ü–µ users
                cursor.execute("SELECT username, full_name FROM users WHERE id = ?", (user_id,))
                user_data = cursor.fetchone()
                conn.close()
                
                if user_data:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    action = "add" if "add" in callback.data else "remove"
                    await state.update_data(
                        target_user_id=user_id,
                        target_user_name=user_data['full_name'] or user_data['username'],
                        action=action
                    )
                    data = await state.get_data()
                    logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {data}")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users –∏ –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–π –∑–∞–ø–∏—Å–∏
                    conn = sqlite3.connect('vehicles.db')
                    cursor = conn.cursor()
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
                    table_exists = cursor.fetchone()
                    
                    if not table_exists:
                        logging.error("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        message_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        cursor.execute("SELECT COUNT(*) FROM users")
                        count = cursor.fetchone()[0]
                        if count == 0:
                            logging.error("–¢–∞–±–ª–∏—Ü–∞ users –ø—É—Å—Ç–∞, –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                            message_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start."
                        else:
                            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                            message_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /myid."
                    
                    conn.close()
                    
                    await callback.message.edit_text(
                        message_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="admin")]
                        ])
                    )
                    await callback.answer()
                    await state.clear()
                    return
            else:
                logging.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback: {callback.data}")
                await callback.message.edit_text(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="admin")]
                    ])
                )
                await callback.answer()
                await state.clear()
                return
        except (ValueError, IndexError, TypeError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback: {e}")
            await callback.message.edit_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="admin")]
                ])
            )
            await callback.answer()
            await state.clear()
            return
    
    user_id = data["target_user_id"]
    user_name = data["target_user_name"]
    action = data["action"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∏–∑ callback
    
    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}), –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    if action != callback_action and callback_action != "unknown":
        logging.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: state={action}, callback={callback_action}")
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    new_status = (action == "add")
    logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {new_status}")
    result = set_admin_status(user_id, new_status)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {result}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.clear()
    
    if result:
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤" if new_status else "—É–¥–∞–ª–µ–Ω –∏–∑"
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ {action_text} —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin")]
            ])
        )
    else:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin")]
            ])
        )
    
    await callback.answer()

@dp.message(Command("users"))
@admin_required
async def show_users(message: types.Message):
    """Handler for showing registered users (admin only)"""
    users = get_all_users()
    stats = get_user_stats()
    
    if not users:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {stats['new_users']}\n"
        f"üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admin_count']}\n\n"
    )
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    
    for user in users:
        admin_status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.get('is_admin') else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç"
        
        users_text += (
            f"üÜî `{user.get('id')}`\n"
            f"üë§ –ò–º—è: {user.get('full_name')}\n"
            f"üîñ Username: {username}\n"
            f"üîë –°—Ç–∞—Ç—É—Å: {admin_status}\n"
            f"üìÖ –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {user.get('first_seen')}\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.get('last_activity')}\n"
            f"üîÑ –î–µ–π—Å—Ç–≤–∏–π: {user.get('interaction_count', 0)}\n\n"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    max_message_length = 4000
    
    if len(stats_text + users_text) <= max_message_length:
        await message.answer(stats_text + users_text, parse_mode="Markdown")
    else:
        await message.answer(stats_text, parse_mode="Markdown")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —á–∞—Å—Ç–∏
        remaining_text = users_text
        while remaining_text:
            # –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ç–æ—á–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            split_point = remaining_text[:max_message_length].rfind("\n\n")
            if split_point == -1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –æ–¥–∏–Ω–∞—Ä–Ω–æ–º—É
                split_point = remaining_text[:max_message_length].rfind("\n")
            if split_point == -1:  # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–∑–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                split_point = max_message_length - 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
            await message.answer(remaining_text[:split_point+1], parse_mode="Markdown")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
            remaining_text = remaining_text[split_point+1:]

# Callback query handlers
@dp.callback_query(lambda c: c.data.startswith("vehicle_"))
async def show_vehicle(callback: types.CallbackQuery):
    """Handler for vehicle selection"""
    vehicle_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    card, keyboard = get_vehicle_card(vehicle_id, user_id)
    
    await callback.message.edit_text(
        card,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back")
async def back_to_menu(callback: types.CallbackQuery):
    """Handler for back button"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_vehicle_buttons()
    )
    await callback.answer()

# Update mileage handlers
@dp.callback_query(lambda c: c.data.startswith("update_mileage_"))
@admin_required
async def update_mileage_start(callback: types.CallbackQuery, state: FSMContext):
    """Start mileage update process"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    # Get current mileage
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute("SELECT mileage FROM vehicles WHERE id = ?", (vehicle_id,))
    current_mileage = cursor.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üìä **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: `{current_mileage} –∫–º`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ):",
        parse_mode="Markdown"
    )
    await state.set_state(MileageUpdateState.mileage)
    await callback.answer()

@dp.message(MileageUpdateState.mileage)
async def process_mileage_update(message: types.Message, state: FSMContext):
    """Process mileage update input"""
    try:
        new_mileage = int(message.text)
        data = await state.get_data()
        vehicle_id = data["vehicle_id"]
        
        # Get current mileage
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute("SELECT mileage FROM vehicles WHERE id = ?", (vehicle_id,))
        current_mileage = cursor.fetchone()[0]
        
        # Validate new mileage
        if new_mileage <= current_mileage:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ ({new_mileage} –∫–º) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ({current_mileage} –∫–º).\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"vehicle_{vehicle_id}")]
                ])
            )
            return
        
        # Update mileage
        cursor.execute("UPDATE vehicles SET mileage = ? WHERE id = ?", (new_mileage, vehicle_id))
        conn.commit()
        conn.close()
        
        await state.clear()
        card, keyboard = get_vehicle_card(vehicle_id)
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–±–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_mileage} –∫–º", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
        
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Maintenance record handlers
@dp.callback_query(lambda c: c.data.startswith("add_to_"))
@admin_required
async def add_to_start(callback: types.CallbackQuery, state: FSMContext):
    """Start maintenance record addition"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    await callback.message.edit_text(
        "üìÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¢–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
        parse_mode="Markdown"
    )
    await state.set_state(MaintenanceState.date)
    await callback.answer()

@dp.message(MaintenanceState.date)
async def process_to_date(message: types.Message, state: FSMContext):
    """Process maintenance date input"""
    await state.update_data(date=message.text)
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –¢–û (–≤ –∫–º):"
    )
    await state.set_state(MaintenanceState.mileage)

@dp.message(MaintenanceState.mileage)
async def process_to_mileage(message: types.Message, state: FSMContext):
    """Process maintenance mileage input"""
    try:
        mileage = int(message.text)
        await state.update_data(mileage=mileage)
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
        )
        await state.set_state(MaintenanceState.works)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(MaintenanceState.works)
async def process_to_works(message: types.Message, state: FSMContext):
    """Process maintenance works description and save record"""
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    
    # Also update vehicle's last_to_date
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    
    # Add maintenance record
    cursor.execute(
        "INSERT INTO maintenance (vehicle_id, date, mileage, works) VALUES (?, ?, ?, ?)",
        (vehicle_id, data["date"], data["mileage"], message.text)
    )
    
    # Update vehicle's last_to_date
    cursor.execute(
        "UPDATE vehicles SET last_to_date = ? WHERE id = ?",
        (data["date"], vehicle_id)
    )
    
    conn.commit()
    conn.close()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
        ])
    )

# Repair record handlers
@dp.callback_query(lambda c: c.data.startswith("add_repair_"))
@admin_required
async def add_repair_start(callback: types.CallbackQuery, state: FSMContext):
    """Start repair record addition"""
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    await callback.message.edit_text(
        "üõ† **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
        parse_mode="Markdown"
    )
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.message(RepairState.date)
async def process_repair_date(message: types.Message, state: FSMContext):
    """Process repair date input for adding new repair"""
    data = await state.get_data()
    
    # Check if we're editing an existing repair
    if 'repair_id' in data:
        # Handle edit mode
        if message.text.strip() == "":
            await state.update_data(new_date=data['current_date'])
        else:
            await state.update_data(new_date=message.text)
        
        await message.answer(
            f"üî¢ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥:** {data['current_mileage']} –∫–º\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ –≤ –∫–º (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
            parse_mode="Markdown"
        )
    else:
        # Handle add mode
        await state.update_data(date=message.text)
        await message.answer(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–º–æ–Ω—Ç–∞ (–≤ –∫–º):"
        )
    
    await state.set_state(RepairState.mileage)

@dp.message(RepairState.mileage)
async def process_repair_mileage(message: types.Message, state: FSMContext):
    """Process repair mileage input"""
    data = await state.get_data()
    
    try:
        # Check if we're editing an existing repair
        if 'repair_id' in data:
            # Handle edit mode - use current mileage if input is empty
            if message.text.strip() == "":
                await state.update_data(new_mileage=data['current_mileage'])
            else:
                new_mileage = int(message.text)
                await state.update_data(new_mileage=new_mileage)
            
            await message.answer(
                f"üìù **–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:**\n{data['current_description']}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
                parse_mode="Markdown"
            )
        else:
            # Handle add mode
            mileage = int(message.text)
            await state.update_data(mileage=mileage)
            await message.answer(
                "üìù –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:"
            )
        
        await state.set_state(RepairState.description)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(RepairState.description)
async def process_repair_description(message: types.Message, state: FSMContext):
    """Process repair description input"""
    data = await state.get_data()
    
    # Check if we're editing an existing repair
    if 'repair_id' in data:
        # Handle edit mode - use current description if input is empty
        if message.text.strip() == "":
            await state.update_data(new_description=data['current_description'])
        else:
            await state.update_data(new_description=message.text)
        
        await message.answer(
            f"üí∞ **–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {data['current_cost']} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0):",
            parse_mode="Markdown"
        )
    else:
        # Handle add mode
        await state.update_data(description=message.text)
        await message.answer(
            "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ):"
        )
    
    await state.set_state(RepairState.cost)

@dp.message(RepairState.cost)
async def process_repair_cost(message: types.Message, state: FSMContext):
    """Process repair cost input and save record"""
    try:
        data = await state.get_data()
        
        # Check if we're editing an existing repair
        if 'repair_id' in data:
            # Handle edit mode
            if message.text.strip() == "":
                new_cost = data['current_cost']
            else:
                new_cost = int(message.text)
            
            # Update repair record
            conn = sqlite3.connect('vehicles.db')
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE repairs SET date = ?, mileage = ?, description = ?, cost = ? WHERE id = ?",
                (
                    data['new_date'], 
                    data['new_mileage'], 
                    data['new_description'], 
                    new_cost if new_cost > 0 else None,
                    data['repair_id']
                )
            )
            conn.commit()
            conn.close()
            
            await state.clear()
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîß –ö —Å–ø–∏—Å–∫—É —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data=f"manage_repairs_{data['vehicle_id']}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{data['vehicle_id']}")]
                ])
            )
        else:
            # Handle add mode
            cost = int(message.text)
            vehicle_id = data["vehicle_id"]
            
            conn = sqlite3.connect('vehicles.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO repairs (vehicle_id, date, mileage, description, cost) VALUES (?, ?, ?, ?, ?)",
                (vehicle_id, data["date"], data["mileage"], data["description"], cost if cost > 0 else None)
            )
            conn.commit()
            conn.close()
            
            await state.clear()
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
                ])
            )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Edit vehicle handlers
@dp.callback_query(lambda c: c.data.startswith("edit_") and not c.data.startswith("edit_field_") and not c.data.startswith("edit_repair_") and not c.data.startswith("edit_maintenance_") and not c.data.startswith("edit_fuel_"))
@admin_required
async def edit_vehicle_start(callback: types.CallbackQuery, state: FSMContext):
    """Start vehicle editing process"""
    vehicle_id = int(callback.data.split("_")[1])
    await state.update_data(vehicle_id=vehicle_id)
    
    # List of editable fields
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    
    # Create keyboard with field buttons and user-friendly names
    keyboard = []
    field_names = {
        "model": "üöó –ú–æ–¥–µ–ª—å –¢–°",
        "vin": "üî¢ VIN –Ω–æ–º–µ—Ä",
        "category": "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "reg_number": "üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä",
        "qualification": "üìÑ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "tachograph_required": "üìü –¢–∞—Ö–æ–≥—Ä–∞—Ñ (0/1)",
        "osago_valid": "üìù –°—Ä–æ–∫ –û–°–ê–ì–û",
        "tech_inspection_date": "üîç –î–∞—Ç–∞ —Ç–µ—Ö. –æ—Å–º–æ—Ç—Ä–∞",
        "tech_inspection_valid": "üìÜ –°—Ä–æ–∫ —Ç–µ—Ö. –æ—Å–º–æ—Ç—Ä–∞",
        "skzi_install_date": "üîê –î–∞—Ç–∞ —É—Å—Ç. –°–ö–ó–ò",
        "skzi_valid_date": "üìÜ –°—Ä–æ–∫ –°–ö–ó–ò",
        "notes": "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        "mileage": "üîÑ –ü—Ä–æ–±–µ–≥"
    }
    
    for i, field in enumerate(fields):
        keyboard.append([
            InlineKeyboardButton(
                text=field_names.get(field, field), 
                callback_data=f"edit_field_{vehicle_id}_{i}"
            )
        ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨Ö –û—Ç–º–µ–Ω–∞", 
            callback_data=f"vehicle_{vehicle_id}"
        )
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–°**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
async def select_edit_field(callback: types.CallbackQuery, state: FSMContext):
    """Handler for selecting field to edit"""
    parts = callback.data.split("_")
    vehicle_id = int(parts[2])
    field_index = int(parts[3])
    
    # Store field index in state
    await state.update_data(field_index=field_index)
    
    # List of editable fields
    fields = [
        "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
        "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
        "skzi_valid_date", "notes", "mileage"
    ]
    
    selected_field = fields[field_index]
    field_format = ""
    
    # User-friendly field names
    field_names = {
        "model": "–ú–æ–¥–µ–ª—å –¢–°",
        "vin": "VIN –Ω–æ–º–µ—Ä",
        "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "reg_number": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
        "qualification": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "tachograph_required": "–ù–∞–ª–∏—á–∏–µ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–∞",
        "osago_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –û–°–ê–ì–û",
        "tech_inspection_date": "–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞",
        "tech_inspection_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞",
        "skzi_install_date": "–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –°–ö–ó–ò",
        "skzi_valid_date": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –°–ö–ó–ò",
        "notes": "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
        "mileage": "–ü—Ä–æ–±–µ–≥"
    }
    
    # Add format hints for specific fields
    if selected_field == "tachograph_required":
        field_format = " (–≤–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1)"
    elif "_date" in selected_field or "_valid" in selected_field:
        field_format = " (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)"
    elif selected_field == "mileage":
        field_format = " (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)"
    
    field_display_name = field_names.get(selected_field, selected_field)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è '{field_display_name}'**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ{field_format}:",
        parse_mode="Markdown"
    )
    
    await state.set_state(EditState.value)
    await callback.answer()

@dp.message(EditState.value)
async def process_edit_value(message: types.Message, state: FSMContext):
    """Process edit value input"""
    try:
        data = await state.get_data()
        vehicle_id = data["vehicle_id"]
        field_index = data["field_index"]
        value = message.text
        
        # List of editable fields
        fields = [
            "model", "vin", "category", "reg_number", "qualification", "tachograph_required",
            "osago_valid", "tech_inspection_date", "tech_inspection_valid", "skzi_install_date",
            "skzi_valid_date", "notes", "mileage"
        ]
        
        selected_field = fields[field_index]
        
        # User-friendly field names
        field_names = {
            "model": "–ú–æ–¥–µ–ª—å –¢–°",
            "vin": "VIN –Ω–æ–º–µ—Ä",
            "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            "reg_number": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
            "qualification": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "tachograph_required": "–ù–∞–ª–∏—á–∏–µ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–∞",
            "osago_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –û–°–ê–ì–û",
            "tech_inspection_date": "–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞",
            "tech_inspection_valid": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–∞",
            "skzi_install_date": "–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –°–ö–ó–ò",
            "skzi_valid_date": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –°–ö–ó–ò",
            "notes": "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
            "mileage": "–ü—Ä–æ–±–µ–≥"
        }
        
        field_display_name = field_names.get(selected_field, selected_field)
        
        # Convert specific fields to proper types
        if selected_field in ["tachograph_required", "mileage"]:
            value = int(value)
        
        # Update database
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute(
            f"UPDATE vehicles SET {selected_field} = ? WHERE id = ?", 
            (value, vehicle_id)
        )
        conn.commit()
        conn.close()
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ü–æ–ª–µ '{field_display_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

# Maintenance Management Handlers
@dp.callback_query(lambda c: c.data.startswith("manage_to_"))
@admin_required
async def manage_maintenance(callback: types.CallbackQuery):
    """Handler for managing maintenance records"""
    vehicle_id = int(callback.data.split("_")[2])
    
    # Get maintenance records
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, date, mileage, works FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    maintenance_records = cursor.fetchall()
    conn.close()
    
    # Create keyboard with maintenance records
    keyboard = []
    if maintenance_records:
        for record in maintenance_records:
            # Limit works description to 30 chars
            works_short = record['works'][:30] + ('...' if len(record['works']) > 30 else '')
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ {record['date']} | {record['mileage']} –∫–º | {works_short}", 
                    callback_data=f"maintenance_{record['id']}"
                )
            ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text="üîπ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¢–û", 
                callback_data=f"no_action"
            )
        ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –¢–°", 
            callback_data=f"vehicle_{vehicle_id}"
        )
    ])
    
    await callback.message.edit_text(
        "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –æ –¢–û**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("maintenance_") and not c.data.startswith("maintenance_delete_"))
async def show_maintenance_record(callback: types.CallbackQuery):
    """Handler for showing maintenance record details"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback data
    callback_parts = callback.data.split("_")
    if len(callback_parts) < 2 or callback_parts[0] != "maintenance":
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
        
    try:
        maintenance_id = int(callback_parts[1])
    except ValueError:
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–ø–∏—Å–∏", show_alert=True)
        return
    
    # Get maintenance record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT m.id, m.date, m.mileage, m.works, m.vehicle_id, v.model, v.reg_number
        FROM maintenance m
        JOIN vehicles v ON m.vehicle_id = v.id
        WHERE m.id = ?
    """, (maintenance_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Check if user is admin
    user_id = callback.from_user.id
    admin = is_admin(user_id)
    
    # Create keyboard with actions based on user role
    if admin:
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_maintenance_{maintenance_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_maintenance_{maintenance_id}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_to_{record['vehicle_id']}")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_to_{record['vehicle_id']}")]
        ]
    
    await callback.message.edit_text(
        f"üìã **–ó–∞–ø–∏—Å—å –æ –¢–û #{maintenance_id}**\n\n"
        f"üöó **–¢–°:** {record['model']} ({record['reg_number']})\n"
        f"üìÖ **–î–∞—Ç–∞:** {record['date']}\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** {record['mileage']} –∫–º\n\n"
        f"üìù **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:**\n{record['works']}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_maintenance_"))
@admin_required
async def edit_maintenance_start(callback: types.CallbackQuery, state: FSMContext):
    """Handler for starting maintenance record edit"""
    maintenance_id = int(callback.data.split("_")[2])
    
    # Get maintenance record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, works, vehicle_id FROM maintenance WHERE id = ?", (maintenance_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save record data to state
    await state.update_data(
        maintenance_id=maintenance_id,
        vehicle_id=record['vehicle_id'],
        current_date=record['date'],
        current_mileage=record['mileage'],
        current_works=record['works']
    )
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¢–û #{maintenance_id}**\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {record['date']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é):",
        parse_mode="Markdown"
    )
    
    await state.set_state(MaintenanceEditState.date)
    await callback.answer()

@dp.message(MaintenanceEditState.date)
async def process_maintenance_edit_date(message: types.Message, state: FSMContext):
    """Process maintenance edit date input"""
    data = await state.get_data()
    
    # Use current date if input is empty
    if message.text.strip() == "":
        await state.update_data(new_date=data['current_date'])
    else:
        await state.update_data(new_date=message.text)
    
    await message.answer(
        f"üî¢ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥:** {data['current_mileage']} –∫–º\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞ –≤ –∫–º (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
        parse_mode="Markdown"
    )
    await state.set_state(MaintenanceEditState.mileage)

@dp.message(MaintenanceEditState.mileage)
async def process_maintenance_edit_mileage(message: types.Message, state: FSMContext):
    """Process maintenance edit mileage input"""
    data = await state.get_data()
    
    try:
        # Use current mileage if input is empty
        if message.text.strip() == "":
            await state.update_data(new_mileage=data['current_mileage'])
        else:
            new_mileage = int(message.text)
            await state.update_data(new_mileage=new_mileage)
        
        await message.answer(
            f"üìù **–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:**\n{data['current_works']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):",
            parse_mode="Markdown"
        )
        await state.set_state(MaintenanceEditState.works)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@dp.message(MaintenanceEditState.works)
async def process_maintenance_edit_works(message: types.Message, state: FSMContext):
    """Process maintenance edit works input and save changes"""
    data = await state.get_data()
    
    # Use current works if input is empty
    if message.text.strip() == "":
        new_works = data['current_works']
    else:
        new_works = message.text
    
    # Update maintenance record
    conn = sqlite3.connect('vehicles.db')
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE maintenance SET date = ?, mileage = ?, works = ? WHERE id = ?",
        (data['new_date'], data['new_mileage'], new_works, data['maintenance_id'])
    )
    
    # If this is the most recent maintenance, update vehicle's last_to_date
    cursor.execute("""
        SELECT id FROM maintenance 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC 
        LIMIT 1
    """, (data['vehicle_id'],))
    latest_maintenance = cursor.fetchone()
    
    if latest_maintenance and latest_maintenance[0] == data['maintenance_id']:
        cursor.execute(
            "UPDATE vehicles SET last_to_date = ? WHERE id = ?",
            (data['new_date'], data['vehicle_id'])
        )
    
    conn.commit()
    conn.close()
    
    await state.clear()
    
    await message.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –¢–û", callback_data=f"manage_to_{data['vehicle_id']}")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{data['vehicle_id']}")]
        ])
    )


@dp.callback_query(lambda c: c.data.startswith("delete_maintenance_"))
@admin_required
async def delete_maintenance_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Handler for confirming maintenance record deletion"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –¢–û –∏–∑ callback data
        callback_parts = callback.data.split("_")
        if len(callback_parts) >= 3:
            maintenance_id = int(callback_parts[2])
        else:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¢–û —Å ID={maintenance_id}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏ –¢–û
        conn = sqlite3.connect('vehicles.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute("SELECT date, mileage, vehicle_id FROM maintenance WHERE id = ?", (maintenance_id,))
        record = cursor.fetchone()
        conn.close()
        
        if not record:
            await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        vehicle_id = record['vehicle_id']
        date = record['date']
        mileage = record['mileage']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"maintenance_delete_confirm_{maintenance_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_to_{vehicle_id}")]
        ]
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –¢–û –æ—Ç {date} (–ø—Ä–æ–±–µ–≥: {mileage} –∫–º)?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¢–û: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("maintenance_delete_confirm_"))
@admin_required
async def maintenance_delete_execute(callback: types.CallbackQuery, state: FSMContext):
    """Handler for executing maintenance record deletion"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –¢–û –∏–∑ callback data
        maintenance_id = int(callback.data.split("_")[3])
        logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¢–û —Å ID={maintenance_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute("SELECT vehicle_id FROM maintenance WHERE id = ?", (maintenance_id,))
        result = cursor.fetchone()
        
        if not result:
            await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            conn.close()
            return
            
        vehicle_id = result[0]
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM maintenance WHERE id = ?", (maintenance_id,))
        conn.commit()
        conn.close()
        
        await callback.message.edit_text(
            "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –¢–û", callback_data=f"manage_to_{vehicle_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
        logging.info(f"–ó–∞–ø–∏—Å—å –¢–û —Å ID={maintenance_id} –¥–ª—è –¢–° ID={vehicle_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¢–û: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", callback_data="back")]
            ])
        )
    
    await callback.answer()
    await state.clear()
    


# Repair Management Handlers
@dp.callback_query(lambda c: c.data.startswith("manage_repairs_"))
@admin_required
async def manage_repairs(callback: types.CallbackQuery):
    """Handler for managing repair records"""
    vehicle_id = int(callback.data.split("_")[2])
    
    # Get repair records
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, date, mileage, description, cost FROM repairs 
        WHERE vehicle_id = ? 
        ORDER BY date DESC, mileage DESC
    """, (vehicle_id,))
    repair_records = cursor.fetchall()
    conn.close()
    
    # Create keyboard with repair records
    keyboard = []
    if repair_records:
        for record in repair_records:
            # Limit description to 30 chars
            desc_short = record['description'][:30] + ('...' if len(record['description']) > 30 else '')
            cost_text = f" | {record['cost']} ‚ÇΩ" if record['cost'] else ""
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üõ† {record['date']} | {record['mileage']} –∫–º{cost_text}", 
                    callback_data=f"repair_{record['id']}"
                )
            ])
    else:
        keyboard.append([
            InlineKeyboardButton(
                text="üîπ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö", 
                callback_data=f"no_action"
            )
        ])
    
    # Add back button
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –¢–°", 
            callback_data=f"vehicle_{vehicle_id}"
        )
    ])
    
    await callback.message.edit_text(
        "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "no_action")
async def no_action(callback: types.CallbackQuery):
    """Handler for empty action"""
    await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

@dp.callback_query(lambda c: c.data.startswith("repair_"))
async def show_repair_record(callback: types.CallbackQuery):
    """Handler for showing repair record details"""
    repair_id = int(callback.data.split("_")[1])
    
    # Get repair record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT r.id, r.date, r.mileage, r.description, r.cost, r.vehicle_id, v.model, v.reg_number
        FROM repairs r
        JOIN vehicles v ON r.vehicle_id = v.id
        WHERE r.id = ?
    """, (repair_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Format cost display
    cost_display = f"{record['cost']} ‚ÇΩ" if record['cost'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # Check if user is admin
    user_id = callback.from_user.id
    admin = is_admin(user_id)
    
    # Create keyboard with actions based on user role
    if admin:
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_repair_{repair_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_repair_{repair_id}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_repairs_{record['vehicle_id']}")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"manage_repairs_{record['vehicle_id']}")]
        ]
    
    await callback.message.edit_text(
        f"üõ† **–ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ #{repair_id}**\n\n"
        f"üöó **–¢–°:** {record['model']} ({record['reg_number']})\n"
        f"üìÖ **–î–∞—Ç–∞:** {record['date']}\n"
        f"üî¢ **–ü—Ä–æ–±–µ–≥:** {record['mileage']} –∫–º\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {cost_display}\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:**\n{record['description']}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("edit_repair_"))
@admin_required
async def edit_repair_start(callback: types.CallbackQuery, state: FSMContext):
    """Handler for starting repair record edit"""
    repair_id = int(callback.data.split("_")[2])
    
    # Get repair record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, description, cost, vehicle_id FROM repairs WHERE id = ?", (repair_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save record data to state
    await state.update_data(
        repair_id=repair_id,
        vehicle_id=record['vehicle_id'],
        current_date=record['date'],
        current_mileage=record['mileage'],
        current_description=record['description'],
        current_cost=record['cost'] or 0
    )
    
    await callback.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ #{repair_id}**\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {record['date']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é):",
        parse_mode="Markdown"
    )
    
    await state.set_state(RepairState.date)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_repair_"))
@admin_required
async def delete_repair_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Handler for confirming repair record deletion"""
    repair_id = int(callback.data.split("_")[2])
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    await state.clear()
    
    # Get repair record
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT id, date, mileage, description, vehicle_id FROM repairs WHERE id = ?", (repair_id,))
    record = cursor.fetchone()
    conn.close()
    
    if not record:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Save repair_id and vehicle_id to state —Å —á–µ—Ç–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    await state.update_data(
        repair_delete_id=repair_id,
        repair_vehicle_id=record['vehicle_id'],
        repair_date=record['date'],
        repair_mileage=record['mileage']
    )
    
    # Create confirmation keyboard
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_repair_{repair_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"repair_{repair_id}")]
    ]
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ –æ—Ç {record['date']} (–ø—Ä–æ–±–µ–≥: {record['mileage']} –∫–º)?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_repair_"))
@admin_required
async def delete_repair_execute(callback: types.CallbackQuery, state: FSMContext):
    """Handler for executing repair record deletion"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–∞ –∏–∑ callback data
        repair_id = int(callback.data.split("_")[3])
        logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–∞ —Å ID={repair_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        conn = sqlite3.connect('vehicles.db')
        cursor = conn.cursor()
        cursor.execute("SELECT vehicle_id FROM repairs WHERE id = ?", (repair_id,))
        result = cursor.fetchone()
        
        if not result:
            await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            conn.close()
            return
            
        vehicle_id = result[0]
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM repairs WHERE id = ?", (repair_id,))
        conn.commit()
        conn.close()
        
        await callback.message.edit_text(
            "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ö —Å–ø–∏—Å–∫—É —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data=f"manage_repairs_{vehicle_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
        logging.info(f"–ó–∞–ø–∏—Å—å —Ä–µ–º–æ–Ω—Ç–∞ —Å ID={repair_id} –¥–ª—è –¢–° ID={vehicle_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–º–æ–Ω—Ç–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", callback_data="back")]
            ])
        )
    
    await callback.answer()
    await state.clear()

# Fuel information handling
@dp.callback_query(lambda c: c.data.startswith("edit_fuel_"))
@admin_required
async def edit_fuel_start(callback: types.CallbackQuery, state: FSMContext):
    """Start fuel information editing process"""
    # Correctly parse id from edit_fuel_{id} pattern
    vehicle_id = int(callback.data.split("_")[2])
    await state.update_data(vehicle_id=vehicle_id)
    
    # Get current fuel information
    conn = sqlite3.connect('vehicles.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("""
        SELECT fuel_type, fuel_tank_capacity, avg_fuel_consumption 
        FROM vehicles 
        WHERE id = ?
    """, (vehicle_id,))
    fuel_data = cursor.fetchone()
    conn.close()
    
    # Create a message with the current values
    message_text = (
        f"‚õΩ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–ø–ª–∏–≤–µ**\n\n"
        f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        f"üõ¢ **–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:** `{fuel_data['fuel_type'] or '-'}`\n"
        f"üõ¢ **–û–±—ä–µ–º –±–∞–∫–∞:** `{fuel_data['fuel_tank_capacity'] or '-'} –ª`\n"
        f"üõ¢ **–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:** `{fuel_data['avg_fuel_consumption'] or '-'} –ª/100–∫–º`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–∏–∑–µ–ª—å', '–ê–ò-95' –∏ —Ç.–¥.):"
    )
    
    await callback.message.edit_text(
        message_text,
        parse_mode="Markdown"
    )
    await state.set_state(FuelInfoState.fuel_type)
    await callback.answer()

@dp.message(FuelInfoState.fuel_type)
async def process_fuel_type(message: types.Message, state: FSMContext):
    """Process fuel type input"""
    await state.update_data(fuel_type=message.text.strip())
    await message.answer(
        "üõ¢ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ –±–∞–∫–∞ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60):"
    )
    await state.set_state(FuelInfoState.fuel_tank_capacity)

@dp.message(FuelInfoState.fuel_tank_capacity)
async def process_fuel_tank_capacity(message: types.Message, state: FSMContext):
    """Process fuel tank capacity input"""
    try:
        if message.text.strip():
            capacity = float(message.text.strip())
            await state.update_data(fuel_tank_capacity=capacity)
        else:
            await state.update_data(fuel_tank_capacity=None)
            
        await message.answer(
            "üõ¢ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –ª/100–∫–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.5):"
        )
        await state.set_state(FuelInfoState.avg_fuel_consumption)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º:"
        )

@dp.message(FuelInfoState.avg_fuel_consumption)
async def process_fuel_consumption(message: types.Message, state: FSMContext):
    """Process fuel consumption input and save all fuel data"""
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    
    # Prepare fuel consumption value
    avg_fuel_consumption = None
    if message.text.strip():
        try:
            avg_fuel_consumption = float(message.text.strip())
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º:"
            )
            return
    
    # Update fuel information in the database
    success = edit_fuel_info(
        vehicle_id=vehicle_id,
        fuel_type=data.get("fuel_type"),
        fuel_tank_capacity=data.get("fuel_tank_capacity"),
        avg_fuel_consumption=avg_fuel_consumption
    )
    
    if success:
        await state.clear()
        await message.answer(
            "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–ª–∏–≤–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–ø–ª–∏–≤–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
            ])
        )

# Report generation handler
@dp.callback_query(lambda c: c.data == "generate_report")
@admin_required
async def generate_pdf_report(callback: types.CallbackQuery):
    """Generate and send PDF report"""
    try:
        # Generate the report
        report_path = utils.generate_expiration_report()
        
        # Send the report
        with open(report_path, 'rb') as pdf:
            await callback.message.answer_document(
                types.BufferedInputFile(
                    pdf.read(),
                    filename=f"report_{datetime.datetime.now().strftime('%Y%m%d')}.pdf"
                ),
                caption="üìä –û—Ç—á–µ—Ç –æ —Å—Ä–æ–∫–∞—Ö –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"
            )
        
        # Cleanup the file
        os.remove(report_path)
        
        await callback.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logging.error(f"Error generating report: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(Command("backup"))
@admin_required
async def backup_command(message: types.Message):
    """Handler for backup command - creates backup and sends to admin"""
    await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    from backup import manual_backup
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    success = await manual_backup(message.from_user.id)
    
    if success:
        await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")

# Main function to run the bot
async def main():
    # Initialize database
    init_database()
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    try:
        from backup import scheduled_backup
        asyncio.create_task(scheduled_backup(hour=3, minute=0))
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # Reset webhook before starting polling to avoid conflicts
    await bot.delete_webhook(drop_pending_updates=True)
    
    # Start polling with aggressive settings to prevent conflicts
    logging.info("Starting vehicle maintenance bot...")
    await dp.start_polling(
        bot,
        allowed_updates=dp.resolve_used_update_types(),
        drop_pending_updates=True,
        polling_timeout=30
    )

if __name__ == "__main__":
    asyncio.run(main())