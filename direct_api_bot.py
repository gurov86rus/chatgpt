#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import requests
import time
import logging
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("direct_bot.log")
    ]
)

logger = logging.getLogger(__name__)

class DirectTelegramBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}/"
        self.last_update_id = 0
        self.running = False
    
    def api_request(self, method, params=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Telegram"""
        url = self.api_url + method
        try:
            response = requests.post(url, json=params) if params else requests.get(url)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {method}: {e}")
            return None
    
    def get_me(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        result = self.api_request("getMe")
        if result and result.get("ok"):
            return result["result"]
        return None
    
    def delete_webhook(self):
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫"""
        result = self.api_request("deleteWebhook", {"drop_pending_updates": True})
        if result and result.get("ok"):
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return True
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {result}")
        return False
    
    def get_updates(self, offset=None, timeout=30):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        params = {
            "timeout": timeout
        }
        if offset:
            params["offset"] = offset
        
        result = self.api_request("getUpdates", params)
        if result and result.get("ok"):
            return result["result"]
        return []
    
    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        params = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            params["reply_markup"] = reply_markup
        
        result = self.api_request("sendMessage", params)
        if result and result.get("ok"):
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
        return False
    
    def handle_start_command(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        chat_id = message["chat"]["id"]
        user = message.get("from", {})
        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        
        response_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n"
            f"–ß–µ—Ä–µ–∑ –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –∑–∞–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ–º–æ–Ω—Ç—ã.\n\n"
            f"–í–∞—à ID: {user.get('id')}"
        )
        
        self.send_message(chat_id, response_text)
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if "text" not in message:
            return
        
        text = message["text"]
        chat_id = message["chat"]["id"]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if text == "/start":
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            self.handle_start_command(message)
        else:
            # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.send_message(chat_id, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {text}\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã API...")
        
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if not self.delete_webhook():
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = self.get_me()
        if not me:
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
            return
        
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.get('username')} (ID: {me.get('id')})")
        
        self.running = True
        while self.running:
            try:
                updates = self.get_updates(offset=self.last_update_id + 1)
                for update in updates:
                    # –û–±–Ω–æ–≤–ª—è–µ–º last_update_id
                    self.last_update_id = update["update_id"]
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if "message" in update:
                        self.handle_message(update["message"])
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞")
                self.running = False
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                import traceback
                logger.error(traceback.format_exc())
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã
    try:
        os.system("pkill -f 'python.*bot' || true")
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–æ–≤: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    bot = DirectTelegramBot(token)
    bot.run()

if __name__ == "__main__":
    main()