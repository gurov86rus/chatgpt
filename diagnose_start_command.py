#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import logging
import asyncio
import sys
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–∞–º—ã–º –ø–æ–¥—Ä–æ–±–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("diagnose_start_command.log")
    ]
)

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–æ–æ–±—â–µ
def test_telegram_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram –±–µ–∑ aiogram"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram...")
    
    try:
        # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ polling
        logger.info("–°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞...")
        response = requests.get(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook?drop_pending_updates=true")
        webhook_result = response.json()
        if webhook_result.get('ok'):
            logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω")
        else:
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤–µ–±—Ö—É–∫–∞: {webhook_result}")
        
        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram —á–µ—Ä–µ–∑ getMe
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ getMe...")
        response = requests.get(f"https://api.telegram.org/bot{TOKEN}/getMe", timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            if bot_info.get('ok'):
                bot_data = bot_info.get('result', {})
                bot_username = bot_data.get('username', 'Unknown')
                bot_id = bot_data.get('id', 'Unknown')
                logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ë–æ—Ç @{bot_username} (ID: {bot_id})")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {bot_info}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram: –ö–æ–¥ {response.status_code}")
            logger.debug(f"–û—Ç–≤–µ—Ç API: {response.text}")
    
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Telegram: {e}")
        import traceback
        logger.debug(traceback.format_exc())
    
    return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
def test_start_command():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        response = requests.get(f"https://api.telegram.org/bot{TOKEN}/getUpdates?limit=10", timeout=10)
        
        if response.status_code == 200:
            updates = response.json()
            if updates.get('ok'):
                updates_data = updates.get('result', [])
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates_data)}")
                
                if updates_data:
                    for update in updates_data:
                        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–∞ /start
                        message = update.get('message', {})
                        text = message.get('text', '')
                        if text == '/start':
                            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            user = message.get('from', {})
                            chat_id = message.get('chat', {}).get('id')
                            user_id = user.get('id')
                            user_name = user.get('first_name', '') + ' ' + user.get('last_name', '')
                            
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                            response = requests.post(
                                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                                json={
                                    'chat_id': chat_id,
                                    'text': f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start",
                                    'parse_mode': 'Markdown'
                                },
                                timeout=10
                            )
                            
                            if response.status_code == 200:
                                result = response.json()
                                if result.get('ok'):
                                    logger.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                    return True
                                else:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {result}")
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: –ö–æ–¥ {response.status_code}")
                                logger.debug(f"–û—Ç–≤–µ—Ç API: {response.text}")
                else:
                    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {updates}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: –ö–æ–¥ {response.status_code}")
            logger.debug(f"–û—Ç–≤–µ—Ç API: {response.text}")
    
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        import traceback
        logger.debug(traceback.format_exc())
    
    return False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Telegram
    if not test_telegram_api():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Telegram")
        return 1
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    if test_start_command():
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start")
    
    logger.info("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0

if __name__ == "__main__":
    sys.exit(main())