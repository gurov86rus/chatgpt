import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import TOKEN
from db_init import init_database
import db_operations as db
from services_db import validate_date, validate_mileage, validate_float
from states_db import MaintenanceState, RepairState, RefuelingState, VehicleState

# Configure logging
logging.basicConfig(level=logging.INFO)

# Text filter for callback queries
class TextFilter:
    def __init__(self, text):
        self.text = text

    async def __call__(self, callback_query: types.CallbackQuery):
        return callback_query.data == self.text

def Text(text):
    return TextFilter(text)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Helper functions for UI
def get_main_menu_keyboard():
    """
    Create the main menu keyboard with vehicle selection
    """
    vehicles = db.get_all_vehicles()

    keyboard = []
    for vehicle in vehicles:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üöõ {vehicle['model']} ({vehicle['reg_number']})", 
                callback_data=f"vehicle_{vehicle['id']}"
            )
        ])

    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="add_vehicle")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_vehicle_keyboard(vehicle_id):
    """
    Create keyboard for vehicle menu
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥", callback_data=f"update_mileage_{vehicle_id}")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –¢–û", callback_data=f"show_maintenance_{vehicle_id}")],
        [InlineKeyboardButton(text="üõ† –í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç", callback_data=f"add_repair_{vehicle_id}")],
        [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞–º–∏", callback_data=f"manage_repairs_{vehicle_id}")],
        [InlineKeyboardButton(text="‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø–ª–∏–≤–∞", callback_data=f"add_refueling_{vehicle_id}")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ø–ª–∏–≤–∞", callback_data=f"show_fuel_stats_{vehicle_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_main")],
    ])
    return keyboard

def get_back_keyboard(vehicle_id=None):
    """
    Create keyboard with back button
    """
    if vehicle_id:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vehicle_{vehicle_id}")],
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_main")],
        ])

def get_cancel_keyboard():
    """
    Create keyboard with cancel button
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ])

def get_confirm_mileage_keyboard(vehicle_id, mileage):
    """
    Create confirmation keyboard for mileage update
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: {mileage} –∫–º", callback_data=f"confirm_mileage_{vehicle_id}_{mileage}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"vehicle_{vehicle_id}")],
    ])

def format_vehicle_card(vehicle_id):
    """
    Format vehicle information into a text card
    """
    vehicle = db.get_vehicle(vehicle_id)
    if not vehicle:
        return "‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    remaining_km = max(0, vehicle['next_to'] - vehicle['mileage']) if vehicle['next_to'] else "–ù–µ –∑–∞–¥–∞–Ω–æ"
    tachograph_status = "‚úî –¢—Ä–µ–±—É–µ—Ç—Å—è" if vehicle['tachograph_required'] else "‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"

    # Add maintenance alert if needed
    alert = db.get_maintenance_alert(vehicle_id)

    card = (
        f"{alert}üöõ **{vehicle['model']} ({vehicle['reg_number']})**\n"
        f"üìú **VIN:** {vehicle['vin'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìè **–ü—Ä–æ–±–µ–≥:** {vehicle['mileage']} –∫–º\n"
    )

    if vehicle['last_to_date']:
        card += f"üîß **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û:** {vehicle['last_to_date']}\n"

    if vehicle['next_to'] and vehicle['next_to_date']:
        card += f"üîú **–°–ª–µ–¥—É—é—â–µ–µ –¢–û:** {vehicle['next_to_date']} (—á–µ—Ä–µ–∑ {remaining_km} –∫–º)\n"

    if vehicle['osago_valid']:
        card += f"üìÖ **–û–°–ê–ì–û –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:** {vehicle['osago_valid']}\n"

    if vehicle['tech_inspection_valid']:
        card += f"üõ† **–¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–æ:** {vehicle['tech_inspection_valid']}\n"

    card += f"üõ† **–¢–∞—Ö–æ–≥—Ä–∞—Ñ:** {tachograph_status}\n"

    if vehicle['fuel_type']:
        card += f"‚õΩ **–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:** {vehicle['fuel_type']}\n"

    if vehicle['fuel_tank_capacity']:
        card += f"‚õΩ **–û–±—ä–µ–º –±–∞–∫–∞:** {vehicle['fuel_tank_capacity']} –ª\n"

    if vehicle['avg_fuel_consumption']:
        card += f"üöó **–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:** {vehicle['avg_fuel_consumption']} –ª/100–∫–º\n"

    return card

def format_maintenance_history(vehicle_id):
    """
    Format maintenance history into text
    """
    maintenance = db.get_maintenance_history(vehicle_id)
    repairs = db.get_repairs(vehicle_id)

    history = "\nüìú **–ò—Å—Ç–æ—Ä–∏—è –¢–û:**\n"

    if maintenance:
        for record in maintenance:
            history += f"üìÖ {record['date']} ‚Äì {record['mileage']} –∫–º ‚Äì {record['works']}\n"
    else:
        history += "üîπ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.\n"

    history += "\nüõ† **–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã:**\n"

    if repairs:
        for repair in repairs:
            cost_info = f" ‚Äì üí∞ {repair['cost']} —Ä—É–±." if repair['cost'] else ""
            history += f"üîß {repair['date']} ‚Äì {repair['mileage']} –∫–º ‚Äì {repair['description']}{cost_info}\n"
    else:
        history += "üîπ –ù–µ—Ç –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤.\n"

    return history

def get_repair_management_keyboard(vehicle_id, repairs):
    """
    Create keyboard for repair management
    """
    keyboard = []

    for repair in repairs:
        date_and_desc = f"{repair['date']} - {repair['description'][:20]}..."
        keyboard.append([
            InlineKeyboardButton(
                text=f"üõ† {date_and_desc}", 
                callback_data=f"show_repair_{repair['id']}"
            )
        ])

    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–º–æ–Ω—Ç", callback_data=f"add_repair_{vehicle_id}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vehicle_{vehicle_id}")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(lambda c: c.data.startswith("manage_repairs_"))
async def manage_repairs(callback_query: types.CallbackQuery):
    """Handler for repair management menu"""
    vehicle_id = int(callback_query.data.split("_")[2])
    vehicle = db.get_vehicle(vehicle_id)
    repairs = db.get_repairs(vehicle_id)

    text = f"üõ† **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞–º–∏ –¥–ª—è {vehicle['model']} ({vehicle['reg_number']})**\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:"

    await callback_query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_repair_management_keyboard(vehicle_id, repairs)
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("show_repair_"))
async def show_repair_details(callback_query: types.CallbackQuery):
    """Handler for showing repair details"""
    repair_id = int(callback_query.data.split("_")[2])

    try:
        conn = db.get_connection() # Assuming db_operations provides a get_connection function
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        cursor.execute("""
        SELECT r.*, v.model, v.reg_number 
        FROM repairs r
        JOIN vehicles v ON r.vehicle_id = v.id
        WHERE r.id = ?
        """, (repair_id,))

        record = cursor.fetchone()
        conn.close()

        if not record:
            await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        vehicle_id = record["vehicle_id"]
        cost_info = f"\nüí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {record['cost']} —Ä—É–±." if record['cost'] else ""

        keyboard = [
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"delete_repair_{repair_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_repairs_{vehicle_id}")]
        ]

        await callback_query.message.edit_text(
            f"üõ† **–î–µ—Ç–∞–ª–∏ —Ä–µ–º–æ–Ω—Ç–∞**\n\n"
            f"üöó **–¢–°:** {record['model']} ({record['reg_number']})\n"
            f"üìÖ **–î–∞—Ç–∞:** {record['date']}\n"
            f"üî¢ **–ü—Ä–æ–±–µ–≥:** {record['mileage']} –∫–º\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {record['description']}{cost_info}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–º–æ–Ω—Ç–∞: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def format_refueling_history(vehicle_id):
    """
    Format refueling history into text
    """
    refueling = db.get_refueling_history(vehicle_id)
    stats = db.calculate_fuel_stats(vehicle_id)

    history = "\n‚õΩ **–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–∞–≤–æ–∫:**\n"

    if refueling:
        for record in refueling:
            total_cost = record['liters'] * record['cost_per_liter']
            history += (
                f"üìÖ {record['date']} ‚Äì {record['mileage']} –∫–º ‚Äì "
                f"{record['liters']} –ª. √ó {record['cost_per_liter']} —Ä—É–±/–ª = "
                f"üí∞ {total_cost} —Ä—É–±.\n"
            )
    else:
        history += "üîπ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–ø—Ä–∞–≤–∫–∞—Ö.\n"

    # Add fuel statistics
    history += (
        f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞:**\n"
        f"üöó –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: {stats['avg_consumption']} –ª/100–∫–º\n"
        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['avg_cost_per_liter']} —Ä—É–±/–ª\n"
        f"‚õΩ –í—Å–µ–≥–æ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['total_fuel_liters']} –ª\n"
        f"üíµ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ: {stats['total_fuel_cost']} —Ä—É–±\n"
    )

    return history

# Command handlers
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Handler for /start command"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """Handler for /help command"""
    help_text = (
        "üîπ –≠—Ç–æ –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:\n"
        "üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏\n"
        "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞\n"
        "üìú –í–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¢–û\n"
        "üõ† –£—á–µ—Ç –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤\n"
        "‚õΩ –£—á–µ—Ç –∑–∞–ø—Ä–∞–≤–æ–∫ –∏ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n"
        "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¢–û"
    )
    await message.answer(help_text)

# Main menu and navigation
@dp.callback_query(Text("back_to_main"))
@dp.callback_query(Text("cancel"))
async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext = None):
    """Handler for back to main menu"""
    # Clear state if it exists
    if state:
        await state.clear()

    # Answer callback to remove loading indicator
    await callback_query.answer()

    # Show main menu
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("vehicle_"))
async def show_vehicle(callback_query: types.CallbackQuery):
    """Handler for vehicle selection"""
    vehicle_id = int(callback_query.data.split("_")[1])

    # Get vehicle information
    vehicle_card = format_vehicle_card(vehicle_id)

    await callback_query.answer()
    await callback_query.message.edit_text(
        vehicle_card,
        parse_mode="Markdown",
        reply_markup=get_vehicle_keyboard(vehicle_id)
    )

# Vehicle management
@dp.callback_query(Text("add_vehicle"))
async def add_vehicle_start(callback_query: types.CallbackQuery, state: FSMContext):
    """Handler for adding a new vehicle"""
    await callback_query.answer()
    await callback_query.message.edit_text(
        "üöõ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VehicleState.model)

@dp.message(VehicleState.model)
async def vehicle_model_entered(message: types.Message, state: FSMContext):
    """Handler for vehicle model input"""
    await state.update_data(model=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VehicleState.reg_number)

@dp.message(VehicleState.reg_number)
async def vehicle_reg_number_entered(message: types.Message, state: FSMContext):
    """Handler for vehicle registration number input"""
    await state.update_data(reg_number=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VehicleState.vin)

@dp.message(VehicleState.vin)
async def vehicle_vin_entered(message: types.Message, state: FSMContext):
    """Handler for vehicle VIN input"""
    vin = None if message.text.strip() == '-' else message.text.strip()
    await state.update_data(vin=vin)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(VehicleState.mileage)

@dp.message(VehicleState.mileage)
async def vehicle_mileage_entered(message: types.Message, state: FSMContext):
    """Handler for vehicle mileage input"""
    try:
        mileage = int(message.text.strip())
        if mileage < 0:
            await message.answer(
                "‚ùå –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                reply_markup=get_cancel_keyboard()
            )
            return

        await state.update_data(mileage=mileage)

        # Save the vehicle data
        data = await state.get_data()
        vehicle_id = db.add_vehicle(
            model=data["model"],
            reg_number=data["reg_number"],
            vin=data.get("vin"),
            mileage=data["mileage"]
        )

        if vehicle_id > 0:
            await message.answer(
                f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å {data['model']} ({data['reg_number']}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            )

            # Clear state
            await state.clear()

            # Show the vehicle
            await message.answer(
                format_vehicle_card(vehicle_id),
                parse_mode="Markdown",
                reply_markup=get_vehicle_keyboard(vehicle_id)
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()

    except ValueError:
        await message.answer(
            "‚ùå –ü—Ä–æ–±–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )

# Mileage update handlers
@dp.callback_query(lambda c: c.data.startswith("update_mileage_"))
async def update_mileage_start(callback_query: types.CallbackQuery, state: FSMContext):
    """Handler for starting mileage update"""
    vehicle_id = int(callback_query.data.split("_")[2])

    await callback_query.answer()
    await callback_query.message.edit_text(
        "üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(VehicleState.update_mileage)
    await state.update_data(vehicle_id=vehicle_id)

@dp.message(VehicleState.update_mileage)
async def mileage_entered(message: types.Message, state: FSMContext):
    """Handler for mileage input"""
    # Validate mileage
    is_valid, result = validate_mileage(message.text)

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Get vehicle data
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]

    # Store mileage in state
    await state.update_data(mileage=result)

    # Ask for confirmation
    await message.answer(
        f"üîÑ –í—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥: **{result} –∫–º**?",
        parse_mode="Markdown",
        reply_markup=get_confirm_mileage_keyboard(vehicle_id, result)
    )

@dp.callback_query(lambda c: c.data.startswith("confirm_mileage_"))
async def confirm_mileage(callback_query: types.CallbackQuery, state: FSMContext):
    """Handler for mileage confirmation"""
    await callback_query.answer()

    # Get data from callback
    parts = callback_query.data.split("_")
    vehicle_id = int(parts[2])
    new_mileage = int(parts[3])

    # Update mileage
    success = db.update_vehicle_mileage(vehicle_id, new_mileage)

    if success:
        await callback_query.message.edit_text(
            "‚úÖ –ü—Ä–æ–±–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            parse_mode="Markdown"
        )

        # Return to vehicle card after a short delay
        await asyncio.sleep(2)
        await callback_query.message.edit_text(
            format_vehicle_card(vehicle_id),
            parse_mode="Markdown",
            reply_markup=get_vehicle_keyboard(vehicle_id)
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞. –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–±–µ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=get_back_keyboard(vehicle_id)
        )

    # Clear state
    await state.clear()

# Maintenance history handlers
@dp.callback_query(lambda c: c.data.startswith("show_maintenance_"))
async def show_maintenance(callback_query: types.CallbackQuery):
    """Handler for showing maintenance history"""
    vehicle_id = int(callback_query.data.split("_")[2])

    await callback_query.answer()
    await callback_query.message.edit_text(
        f"üìú **–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è**\n\n{format_maintenance_history(vehicle_id)}",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard(vehicle_id)
    )

# Repair handlers
@dp.callback_query(lambda c: c.data.startswith("add_repair_"))
async def add_repair_start(callback_query: types.CallbackQuery, state: FSMContext):
    """Handler for starting repair addition"""
    vehicle_id = int(callback_query.data.split("_")[2])

    await callback_query.answer()
    await callback_query.message.edit_text(
        "üõ† **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–º–æ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(RepairState.date)
    await state.update_data(vehicle_id=vehicle_id)

@dp.message(RepairState.date)
async def repair_date_entered(message: types.Message, state: FSMContext):
    """Handler for repair date input"""
    # Validate date
    if not validate_date(message.text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Store date in state
    await state.update_data(date=message.text)

    # Ask for mileage
    await message.answer(
        "üöó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–º–æ–Ω—Ç–∞ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RepairState.mileage)

@dp.message(RepairState.mileage)
async def repair_mileage_entered(message: types.Message, state: FSMContext):
    """Handler for repair mileage input"""
    # Validate mileage
    is_valid, result = validate_mileage(message.text)

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Store mileage in state
    await state.update_data(mileage=result)

    # Ask for repair details
    await message.answer(
        "üîß –ß—Ç–æ —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å? –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RepairState.description)

@dp.message(RepairState.description)
async def repair_description_entered(message: types.Message, state: FSMContext):
    """Handler for repair description input"""
    # Store repair details in state
    await state.update_data(description=message.text.strip())

    # Ask for repair cost
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RepairState.cost)

@dp.message(RepairState.cost)
async def repair_cost_entered(message: types.Message, state: FSMContext):
    """Handler for repair cost input"""
    try:
        cost = None
        if message.text.strip() != '-':
            # Try to convert cost to integer
            cost = int(message.text)

            if cost < 0:
                raise ValueError("Cost must be positive")

        # Store cost in state
        await state.update_data(cost=cost)

        # Get repair data
        data = await state.get_data()

        # Add repair record
        success = db.add_repair(
            vehicle_id=data["vehicle_id"],
            date=data["date"],
            mileage=data["mileage"],
            description=data["description"],
            cost=data["cost"]
        )

        if success:
            await message.answer("‚úÖ –†–µ–º–æ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

            # Return to vehicle card after a short delay
            await asyncio.sleep(1)
            await message.answer(
                format_vehicle_card(data["vehicle_id"]),
                parse_mode="Markdown",
                reply_markup=get_vehicle_keyboard(data["vehicle_id"])
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞.",
                reply_markup=get_back_keyboard(data["vehicle_id"])
            )

        # Clear state
        await state.clear()

    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏–ª–∏ '-':",
            reply_markup=get_cancel_keyboard()
        )

# Fuel tracking handlers
@dp.callback_query(lambda c: c.data.startswith("show_fuel_stats_"))
async def show_fuel_stats(callback_query: types.CallbackQuery):
    """Handler for showing fuel statistics"""
    vehicle_id = int(callback_query.data.split("_")[3])

    await callback_query.answer()
    await callback_query.message.edit_text(
        f"‚õΩ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞**\n\n{format_refueling_history(vehicle_id)}",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard(vehicle_id)
    )

@dp.callback_query(lambda c: c.data.startswith("add_refueling_"))
async def add_refueling_start(callback_query: types.CallbackQuery, state: FSMContext):
    """Handler for starting refueling addition"""
    vehicle_id = int(callback_query.data.split("_")[2])

    await callback_query.answer()
    await callback_query.message.edit_text(
        "‚õΩ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–∞–≤–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø—Ä–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(RefuelingState.date)
    await state.update_data(vehicle_id=vehicle_id)

@dp.message(RefuelingState.date)
async def refueling_date_entered(message: types.Message, state: FSMContext):
    """Handler for refueling date input"""
    # Validate date
    if not validate_date(message.text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025):",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Store date in state
    await state.update_data(date=message.text)

    # Ask for mileage
    await message.answer(
        "üöó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø—Ä–∞–≤–∫–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RefuelingState.mileage)

@dp.message(RefuelingState.mileage)
async def refueling_mileage_entered(message: types.Message, state: FSMContext):
    """Handler for refueling mileage input"""
    # Validate mileage
    is_valid, result = validate_mileage(message.text)

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Store mileage in state
    await state.update_data(mileage=result)

    # Ask for liters
    await message.answer(
        "‚õΩ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ (–≤ –ª–∏—Ç—Ä–∞—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RefuelingState.liters)

@dp.message(RefuelingState.liters)
async def refueling_liters_entered(message: types.Message, state: FSMContext):
    """Handler for fuel liters input"""
    # Validate liters
    is_valid, result = validate_float(message.text, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤")

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Store liters in state
    await state.update_data(liters=result)

    # Ask for cost per liter
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ª–∏—Ç—Ä–∞ —Ç–æ–ø–ª–∏–≤–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RefuelingState.cost_per_liter)

@dp.message(RefuelingState.cost_per_liter)
async def refueling_cost_entered(message: types.Message, state: FSMContext):
    """Handler for fuel cost input"""
    # Validate cost
    is_valid, result = validate_float(message.text, "—Å—Ç–æ–∏–º–æ—Å—Ç—å")

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Get complete refueling data
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    date = data["date"]
    mileage = data["mileage"]
    liters = data["liters"]
    cost_per_liter = result

    # Add refueling record
    success = db.add_refueling(
        vehicle_id=vehicle_id,
        date=date,
        mileage=mileage,
        liters=liters,
        cost_per_liter=cost_per_liter
    )

    if success:
        total_cost = liters * cost_per_liter
        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üöó –ü—Ä–æ–±–µ–≥: {mileage} –∫–º\n"
            f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {liters} –ª.\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f} —Ä—É–±. ({cost_per_liter:.2f} —Ä—É–±/–ª)"
        )

        # Return to vehicle card after a short delay
        await asyncio.sleep(1)
        await message.answer(
            format_vehicle_card(vehicle_id),
            parse_mode="Markdown",
            reply_markup=get_vehicle_keyboard(vehicle_id)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_back_keyboard(vehicle_id)
        )

    # Clear state
    await state.clear()

# Repair management handlers
@dp.callback_query(lambda c: c.data.startswith("delete_repair_"))
async def delete_repair_confirm(callback_query: types.CallbackQuery):
    """Handler for confirming repair record deletion"""
    repair_id = int(callback_query.data.split("_")[2])
    logging.debug(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞ —Å ID={repair_id}")

    try:
        conn = db.get_connection()
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("""
        SELECT r.*, v.model, v.reg_number 
        FROM repairs r
        JOIN vehicles v ON r.vehicle_id = v.id
        WHERE r.id = ?
        """, (repair_id,))

        record = cursor.fetchone()
        conn.close()

        if not record:
            await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        vehicle_id = record["vehicle_id"]
        date = record["date"]
        cost = record.get("cost", 0)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"repair_delete_confirm_{repair_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_repairs_{vehicle_id}")]
        ]

        await callback_query.message.edit_text(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ –æ—Ç {date}?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="Markdown"
        )
        await callback_query.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("repair_delete_confirm_"))
async def repair_delete_execute(callback_query: types.CallbackQuery):
    """Handler for executing repair record deletion"""
    try:
        repair_id = int(callback_query.data.split("_")[3])
        logging.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞ —Å ID={repair_id}")

        # –ü–æ–ª—É—á–∞–µ–º vehicle_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT vehicle_id FROM repairs WHERE id = ?", (repair_id,))
        result = cursor.fetchone()
        conn.close()

        if not result:
            await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            return

        vehicle_id = result["vehicle_id"]

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ db_operations
        success = db.delete_repair(repair_id)

        if success:
            await callback_query.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data=f"manage_repairs_{vehicle_id}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –¢–°", callback_data=f"vehicle_{vehicle_id}")]
                ])
            )
            logging.info(f"–ó–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ —Å ID={repair_id} –¥–ª—è –¢–° ID={vehicle_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await callback_query.message.edit_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"manage_repairs_{vehicle_id}")]
                ])
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–º–æ–Ω—Ç–µ: {e}", exc_info=True)
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


@dp.message(RefuelingState.liters)
async def refueling_liters_entered(message: types.Message, state: FSMContext):
    """Handler for fuel liters input"""
    # Validate liters
    is_valid, result = validate_float(message.text, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤")

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Store liters in state
    await state.update_data(liters=result)

    # Ask for cost per liter
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ª–∏—Ç—Ä–∞ —Ç–æ–ø–ª–∏–≤–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RefuelingState.cost_per_liter)

@dp.message(RefuelingState.cost_per_liter)
async def refueling_cost_entered(message: types.Message, state: FSMContext):
    """Handler for fuel cost input"""
    # Validate cost
    is_valid, result = validate_float(message.text, "—Å—Ç–æ–∏–º–æ—Å—Ç—å")

    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return

    # Get complete refueling data
    data = await state.get_data()
    vehicle_id = data["vehicle_id"]
    date = data["date"]
    mileage = data["mileage"]
    liters = data["liters"]
    cost_per_liter = result

    # Add refueling record
    success = db.add_refueling(
        vehicle_id=vehicle_id,
        date=date,
        mileage=mileage,
        liters=liters,
        cost_per_liter=cost_per_liter
    )

    if success:
        total_cost = liters * cost_per_liter
        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üöó –ü—Ä–æ–±–µ–≥: {mileage} –∫–º\n"
            f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {liters} –ª.\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f} —Ä—É–±. ({cost_per_liter:.2f} —Ä—É–±/–ª)"
        )

        # Return to vehicle card after a short delay
        await asyncio.sleep(1)
        await message.answer(
            format_vehicle_card(vehicle_id),
            parse_mode="Markdown",
            reply_markup=get_vehicle_keyboard(vehicle_id)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_back_keyboard(vehicle_id)
        )

    # Clear state
    await state.clear()

# Main entry point
async def main():
    # Initialize the database
    init_database()

    # Start the bot
    logging.info("Starting bot...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")