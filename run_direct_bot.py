#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import asyncio
import multiprocessing
import time
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot_direct.log")
    ]
)

logger = logging.getLogger("bot")

def test_telegram_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Telegram –±–µ–∑ aiogram"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Telegram —Å —Ç–æ–∫–µ–Ω–æ–º (ID: {token.split(':')[0]})")
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å getMe
        url = f"https://api.telegram.org/bot{token}/getMe"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}")
        
        response = requests.get(url, timeout=10)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            logger.info(f"API –æ—Ç–≤–µ—Ç: {data}")
            if data.get('ok'):
                bot_username = data['result'].get('username')
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º @{bot_username}")
                return True
            else:
                logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code}")
            logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
    
    return False

def run_simple_bot():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
    if not test_telegram_api():
        logger.error("–¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling...")
    
    # –°–±—Ä–æ—Å webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    try:
        url = f"https://api.telegram.org/bot{token}/deleteWebhook"
        response = requests.get(url)
        logger.info(f"–°–±—Ä–æ—Å webhook: {response.json()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
    offset = None
    
    try:
        while True:
            try:
                # –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                params = {'timeout': 30}
                if offset:
                    params['offset'] = offset
                
                url = f"https://api.telegram.org/bot{token}/getUpdates"
                response = requests.get(url, params=params, timeout=35)
                
                if response.status_code != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
                    logger.error(response.text)
                    time.sleep(5)
                    continue
                
                updates = response.json()
                
                if not updates.get('ok'):
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {updates}")
                    time.sleep(5)
                    continue
                
                results = updates.get('result', [])
                
                if results:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(results)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º offset - –±–µ—Ä–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + 1
                    offset = results[-1]['update_id'] + 1
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    for update in results:
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if 'message' in update and 'text' in update['message']:
                            chat_id = update['message']['chat']['id']
                            message_text = update['message']['text']
                            
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {message_text}")
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
                            if message_text == '/start':
                                reply = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç."
                            # –ï—Å–ª–∏ —ç—Ç–æ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            else:
                                reply = f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message_text}"
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                            send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                            send_data = {
                                'chat_id': chat_id,
                                'text': reply
                            }
                            
                            send_response = requests.post(send_url, json=send_data)
                            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {send_response.status_code}")
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
                time.sleep(5)
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                import traceback
                logger.error(traceback.format_exc())
                time.sleep(5)
                
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram API")
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
        bot_process = multiprocessing.Process(target=run_simple_bot)
        bot_process.start()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ {bot_process.pid}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        bot_process.join()
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())