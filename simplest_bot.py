#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import time
import logging
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("simplest_bot.log")
    ]
)

logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω {token[:5]}...")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{token}/deleteWebhook",
            json={"drop_pending_updates": True}
        )
        logger.info(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞: {response.status_code} - {response.json() if response.text else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    try:
        response = requests.get(f"https://api.telegram.org/bot{token}/getMe")
        result = response.json()
        if result.get("ok"):
            bot_info = result["result"]
            logger.info(f"–ë–æ—Ç @{bot_info.get('username')} (ID: {bot_info.get('id')}) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞: {result}")
            return False
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞: {e}")
        return False
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    offset = 0
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (offset={offset})...")
            response = requests.get(
                f"https://api.telegram.org/bot{token}/getUpdates",
                params={
                    "offset": offset,
                    "timeout": 5
                }
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code} - {response.text}")
                time.sleep(3)
                continue
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = response.json()
            if not result.get("ok"):
                logger.error(f"–û—à–∏–±–∫–∞ API: {result}")
                time.sleep(3)
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = result.get("result", [])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            
            for update in updates:
                # –û–±–Ω–æ–≤–ª—è–µ–º offset
                offset = max(offset, update["update_id"] + 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if "message" not in update:
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {update}")
                    continue
                
                message = update["message"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
                if "text" not in message:
                    logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_id = message["chat"]["id"]
                text = message["text"]
                user = message.get("from", {})
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
                if text == "/start":
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    name = user.get("first_name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    response_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    try:
                        send_response = requests.post(
                            f"https://api.telegram.org/bot{token}/sendMessage",
                            json={
                                "chat_id": chat_id,
                                "text": response_text
                            }
                        )
                        
                        if send_response.status_code == 200 and send_response.json().get("ok"):
                            logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ /start —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {send_response.status_code} - {send_response.text}")
                    
                    except Exception as e:
                        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                
                # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                else:
                    try:
                        send_response = requests.post(
                            f"https://api.telegram.org/bot{token}/sendMessage",
                            json={
                                "chat_id": chat_id,
                                "text": f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {text}"
                            }
                        )
                        
                        if send_response.status_code == 200:
                            logger.info(f"–≠—Ö–æ-–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞: {send_response.status_code} - {send_response.text}")
                    
                    except Exception as e:
                        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞: {e}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞")
            break
        
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(5)
    
    return True

if __name__ == "__main__":
    main()